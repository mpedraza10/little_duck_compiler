Created by PLY (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> PROGRAM ID ENDINSTRUC vars funcs mas_funcs MAIN body END
Rule 2     vars -> VAR variables
Rule 3     vars -> empty
Rule 4     variables -> list_ids COLON type ENDINSTRUC mas_vars
Rule 5     list_ids -> ID mas_ids
Rule 6     mas_ids -> COMMA list_ids
Rule 7     mas_ids -> empty
Rule 8     mas_vars -> variables
Rule 9     mas_vars -> empty
Rule 10    type -> INT
Rule 11    type -> FLOAT
Rule 12    type -> BOOL
Rule 13    funcs -> func_start LPAREN list_params RPAREN LBRACKET vars body RBRACKET ENDINSTRUC
Rule 14    funcs -> empty
Rule 15    func_start -> VOID ID
Rule 16    mas_funcs -> funcs
Rule 17    mas_funcs -> empty
Rule 18    list_params -> ID COLON type mas_params
Rule 19    list_params -> empty
Rule 20    mas_params -> COMMA list_params
Rule 21    mas_params -> empty
Rule 22    body -> LBRACE list_statements RBRACE
Rule 23    statement -> assign
Rule 24    statement -> condition
Rule 25    statement -> cycle
Rule 26    statement -> f_call
Rule 27    statement -> print
Rule 28    list_statements -> statement more_statements
Rule 29    list_statements -> empty
Rule 30    more_statements -> list_statements
Rule 31    assign -> ID ASSIGN expresion ENDINSTRUC
Rule 32    expresion -> exp mas_expresiones
Rule 33    mas_expresiones -> GREATERTHAN exp
Rule 34    mas_expresiones -> LESSTHAN exp
Rule 35    mas_expresiones -> NOTEQUAL exp
Rule 36    mas_expresiones -> empty
Rule 37    exp -> termino mas_exp
Rule 38    mas_exp -> PLUS exp
Rule 39    mas_exp -> MINUS exp
Rule 40    mas_exp -> empty
Rule 41    termino -> factor mas_terminos
Rule 42    mas_terminos -> TIMES termino
Rule 43    mas_terminos -> DIVIDE termino
Rule 44    mas_terminos -> empty
Rule 45    factor -> LPAREN expresion RPAREN
Rule 46    factor -> factor_opt
Rule 47    factor -> PLUS factor_opt
Rule 48    factor -> MINUS factor_opt
Rule 49    factor_opt -> cte
Rule 50    factor_opt -> ID
Rule 51    cte -> CTEINT
Rule 52    cte -> CTEFLOAT
Rule 53    cte -> CTEBOOL
Rule 54    condition -> IF LPAREN expresion RPAREN body else_block ENDINSTRUC
Rule 55    else_block -> ELSE body
Rule 56    else_block -> empty
Rule 57    cycle -> DO body WHILE LPAREN expresion RPAREN ENDINSTRUC
Rule 58    f_call -> ID LPAREN list_exp RPAREN ENDINSTRUC
Rule 59    list_exp -> expresion mas_list_exp
Rule 60    list_exp -> empty
Rule 61    mas_list_exp -> COMMA list_exp
Rule 62    mas_list_exp -> empty
Rule 63    print -> PRINT LPAREN print_opt RPAREN ENDINSTRUC
Rule 64    print_opt -> expresion more_opt
Rule 65    print_opt -> CTESTRING more_opt
Rule 66    more_opt -> COMMA print_opt
Rule 67    more_opt -> empty
Rule 68    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 31
BOOL                 : 12
COLON                : 4 18
COMMA                : 6 20 61 66
CTEBOOL              : 53
CTEFLOAT             : 52
CTEINT               : 51
CTESTRING            : 65
DIVIDE               : 43
DO                   : 57
ELSE                 : 55
END                  : 1
ENDINSTRUC           : 1 4 13 31 54 57 58 63
FLOAT                : 11
GREATERTHAN          : 33
ID                   : 1 5 15 18 31 50 58
IF                   : 54
INT                  : 10
LBRACE               : 22
LBRACKET             : 13
LESSTHAN             : 34
LPAREN               : 13 45 54 57 58 63
MAIN                 : 1
MINUS                : 39 48
NOTEQUAL             : 35
PLUS                 : 38 47
PRINT                : 63
PROGRAM              : 1
RBRACE               : 22
RBRACKET             : 13
RPAREN               : 13 45 54 57 58 63
TIMES                : 42
VAR                  : 2
VOID                 : 15
WHILE                : 57
error                : 

Nonterminals, with rules where they appear

assign               : 23
body                 : 1 13 54 55 57
condition            : 24
cte                  : 49
cycle                : 25
else_block           : 54
empty                : 3 7 9 14 17 19 21 29 36 40 44 56 60 62 67
exp                  : 32 33 34 35 38 39
expresion            : 31 45 54 57 59 64
f_call               : 26
factor               : 41
factor_opt           : 46 47 48
func_start           : 13
funcs                : 1 16
list_exp             : 58 61
list_ids             : 4 6
list_params          : 13 20
list_statements      : 22 30
mas_exp              : 37
mas_expresiones      : 32
mas_funcs            : 1
mas_ids              : 5
mas_list_exp         : 59
mas_params           : 18
mas_terminos         : 41
mas_vars             : 4
more_opt             : 64 65
more_statements      : 28
print                : 27
print_opt            : 63 66
prog                 : 0
statement            : 28
termino              : 37 42 43
type                 : 4 18
variables            : 2 8
vars                 : 1 13


state 0

    (0) S' -> . prog
    (1) prog -> . PROGRAM ID ENDINSTRUC vars funcs mas_funcs MAIN body END

    PROGRAM         shift and go to state 2

    prog                           shift and go to state 1

state 1

    (0) S' -> prog .



state 2

    (1) prog -> PROGRAM . ID ENDINSTRUC vars funcs mas_funcs MAIN body END

    ID              shift and go to state 3


state 3

    (1) prog -> PROGRAM ID . ENDINSTRUC vars funcs mas_funcs MAIN body END

    ENDINSTRUC      shift and go to state 4


state 4

    (1) prog -> PROGRAM ID ENDINSTRUC . vars funcs mas_funcs MAIN body END
    (2) vars -> . VAR variables
    (3) vars -> . empty
    (68) empty -> .

    VAR             shift and go to state 6
    VOID            reduce using rule 68 (empty -> .)
    MAIN            reduce using rule 68 (empty -> .)

    vars                           shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) prog -> PROGRAM ID ENDINSTRUC vars . funcs mas_funcs MAIN body END
    (13) funcs -> . func_start LPAREN list_params RPAREN LBRACKET vars body RBRACKET ENDINSTRUC
    (14) funcs -> . empty
    (15) func_start -> . VOID ID
    (68) empty -> .

  ! shift/reduce conflict for VOID resolved as shift
    VOID            shift and go to state 11
    MAIN            reduce using rule 68 (empty -> .)

  ! VOID            [ reduce using rule 68 (empty -> .) ]

    funcs                          shift and go to state 8
    func_start                     shift and go to state 9
    empty                          shift and go to state 10

state 6

    (2) vars -> VAR . variables
    (4) variables -> . list_ids COLON type ENDINSTRUC mas_vars
    (5) list_ids -> . ID mas_ids

    ID              shift and go to state 14

    variables                      shift and go to state 12
    list_ids                       shift and go to state 13

state 7

    (3) vars -> empty .

    VOID            reduce using rule 3 (vars -> empty .)
    MAIN            reduce using rule 3 (vars -> empty .)
    LBRACE          reduce using rule 3 (vars -> empty .)


state 8

    (1) prog -> PROGRAM ID ENDINSTRUC vars funcs . mas_funcs MAIN body END
    (16) mas_funcs -> . funcs
    (17) mas_funcs -> . empty
    (13) funcs -> . func_start LPAREN list_params RPAREN LBRACKET vars body RBRACKET ENDINSTRUC
    (14) funcs -> . empty
    (68) empty -> .
    (15) func_start -> . VOID ID

    MAIN            reduce using rule 68 (empty -> .)
    VOID            shift and go to state 11

    funcs                          shift and go to state 15
    mas_funcs                      shift and go to state 16
    empty                          shift and go to state 17
    func_start                     shift and go to state 9

state 9

    (13) funcs -> func_start . LPAREN list_params RPAREN LBRACKET vars body RBRACKET ENDINSTRUC

    LPAREN          shift and go to state 18


state 10

    (14) funcs -> empty .

    VOID            reduce using rule 14 (funcs -> empty .)
    MAIN            reduce using rule 14 (funcs -> empty .)


state 11

    (15) func_start -> VOID . ID

    ID              shift and go to state 19


state 12

    (2) vars -> VAR variables .

    VOID            reduce using rule 2 (vars -> VAR variables .)
    MAIN            reduce using rule 2 (vars -> VAR variables .)
    LBRACE          reduce using rule 2 (vars -> VAR variables .)


state 13

    (4) variables -> list_ids . COLON type ENDINSTRUC mas_vars

    COLON           shift and go to state 20


state 14

    (5) list_ids -> ID . mas_ids
    (6) mas_ids -> . COMMA list_ids
    (7) mas_ids -> . empty
    (68) empty -> .

    COMMA           shift and go to state 22
    COLON           reduce using rule 68 (empty -> .)

    mas_ids                        shift and go to state 21
    empty                          shift and go to state 23

state 15

    (16) mas_funcs -> funcs .

    MAIN            reduce using rule 16 (mas_funcs -> funcs .)


state 16

    (1) prog -> PROGRAM ID ENDINSTRUC vars funcs mas_funcs . MAIN body END

    MAIN            shift and go to state 24


state 17

    (17) mas_funcs -> empty .
    (14) funcs -> empty .

  ! reduce/reduce conflict for MAIN resolved using rule 14 (funcs -> empty .)
    MAIN            reduce using rule 14 (funcs -> empty .)

  ! MAIN            [ reduce using rule 17 (mas_funcs -> empty .) ]


state 18

    (13) funcs -> func_start LPAREN . list_params RPAREN LBRACKET vars body RBRACKET ENDINSTRUC
    (18) list_params -> . ID COLON type mas_params
    (19) list_params -> . empty
    (68) empty -> .

    ID              shift and go to state 26
    RPAREN          reduce using rule 68 (empty -> .)

    list_params                    shift and go to state 25
    empty                          shift and go to state 27

state 19

    (15) func_start -> VOID ID .

    LPAREN          reduce using rule 15 (func_start -> VOID ID .)


state 20

    (4) variables -> list_ids COLON . type ENDINSTRUC mas_vars
    (10) type -> . INT
    (11) type -> . FLOAT
    (12) type -> . BOOL

    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 31

    type                           shift and go to state 28

state 21

    (5) list_ids -> ID mas_ids .

    COLON           reduce using rule 5 (list_ids -> ID mas_ids .)


state 22

    (6) mas_ids -> COMMA . list_ids
    (5) list_ids -> . ID mas_ids

    ID              shift and go to state 14

    list_ids                       shift and go to state 32

state 23

    (7) mas_ids -> empty .

    COLON           reduce using rule 7 (mas_ids -> empty .)


state 24

    (1) prog -> PROGRAM ID ENDINSTRUC vars funcs mas_funcs MAIN . body END
    (22) body -> . LBRACE list_statements RBRACE

    LBRACE          shift and go to state 34

    body                           shift and go to state 33

state 25

    (13) funcs -> func_start LPAREN list_params . RPAREN LBRACKET vars body RBRACKET ENDINSTRUC

    RPAREN          shift and go to state 35


state 26

    (18) list_params -> ID . COLON type mas_params

    COLON           shift and go to state 36


state 27

    (19) list_params -> empty .

    RPAREN          reduce using rule 19 (list_params -> empty .)


state 28

    (4) variables -> list_ids COLON type . ENDINSTRUC mas_vars

    ENDINSTRUC      shift and go to state 37


state 29

    (10) type -> INT .

    ENDINSTRUC      reduce using rule 10 (type -> INT .)
    COMMA           reduce using rule 10 (type -> INT .)
    RPAREN          reduce using rule 10 (type -> INT .)


state 30

    (11) type -> FLOAT .

    ENDINSTRUC      reduce using rule 11 (type -> FLOAT .)
    COMMA           reduce using rule 11 (type -> FLOAT .)
    RPAREN          reduce using rule 11 (type -> FLOAT .)


state 31

    (12) type -> BOOL .

    ENDINSTRUC      reduce using rule 12 (type -> BOOL .)
    COMMA           reduce using rule 12 (type -> BOOL .)
    RPAREN          reduce using rule 12 (type -> BOOL .)


state 32

    (6) mas_ids -> COMMA list_ids .

    COLON           reduce using rule 6 (mas_ids -> COMMA list_ids .)


state 33

    (1) prog -> PROGRAM ID ENDINSTRUC vars funcs mas_funcs MAIN body . END

    END             shift and go to state 38


state 34

    (22) body -> LBRACE . list_statements RBRACE
    (28) list_statements -> . statement more_statements
    (29) list_statements -> . empty
    (23) statement -> . assign
    (24) statement -> . condition
    (25) statement -> . cycle
    (26) statement -> . f_call
    (27) statement -> . print
    (68) empty -> .
    (31) assign -> . ID ASSIGN expresion ENDINSTRUC
    (54) condition -> . IF LPAREN expresion RPAREN body else_block ENDINSTRUC
    (57) cycle -> . DO body WHILE LPAREN expresion RPAREN ENDINSTRUC
    (58) f_call -> . ID LPAREN list_exp RPAREN ENDINSTRUC
    (63) print -> . PRINT LPAREN print_opt RPAREN ENDINSTRUC

    RBRACE          reduce using rule 68 (empty -> .)
    ID              shift and go to state 47
    IF              shift and go to state 48
    DO              shift and go to state 49
    PRINT           shift and go to state 50

    list_statements                shift and go to state 39
    statement                      shift and go to state 40
    empty                          shift and go to state 41
    assign                         shift and go to state 42
    condition                      shift and go to state 43
    cycle                          shift and go to state 44
    f_call                         shift and go to state 45
    print                          shift and go to state 46

state 35

    (13) funcs -> func_start LPAREN list_params RPAREN . LBRACKET vars body RBRACKET ENDINSTRUC

    LBRACKET        shift and go to state 51


state 36

    (18) list_params -> ID COLON . type mas_params
    (10) type -> . INT
    (11) type -> . FLOAT
    (12) type -> . BOOL

    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    BOOL            shift and go to state 31

    type                           shift and go to state 52

state 37

    (4) variables -> list_ids COLON type ENDINSTRUC . mas_vars
    (8) mas_vars -> . variables
    (9) mas_vars -> . empty
    (4) variables -> . list_ids COLON type ENDINSTRUC mas_vars
    (68) empty -> .
    (5) list_ids -> . ID mas_ids

    VOID            reduce using rule 68 (empty -> .)
    MAIN            reduce using rule 68 (empty -> .)
    LBRACE          reduce using rule 68 (empty -> .)
    ID              shift and go to state 14

    list_ids                       shift and go to state 13
    mas_vars                       shift and go to state 53
    variables                      shift and go to state 54
    empty                          shift and go to state 55

state 38

    (1) prog -> PROGRAM ID ENDINSTRUC vars funcs mas_funcs MAIN body END .

    $end            reduce using rule 1 (prog -> PROGRAM ID ENDINSTRUC vars funcs mas_funcs MAIN body END .)


state 39

    (22) body -> LBRACE list_statements . RBRACE

    RBRACE          shift and go to state 56


state 40

    (28) list_statements -> statement . more_statements
    (30) more_statements -> . list_statements
    (28) list_statements -> . statement more_statements
    (29) list_statements -> . empty
    (23) statement -> . assign
    (24) statement -> . condition
    (25) statement -> . cycle
    (26) statement -> . f_call
    (27) statement -> . print
    (68) empty -> .
    (31) assign -> . ID ASSIGN expresion ENDINSTRUC
    (54) condition -> . IF LPAREN expresion RPAREN body else_block ENDINSTRUC
    (57) cycle -> . DO body WHILE LPAREN expresion RPAREN ENDINSTRUC
    (58) f_call -> . ID LPAREN list_exp RPAREN ENDINSTRUC
    (63) print -> . PRINT LPAREN print_opt RPAREN ENDINSTRUC

    RBRACE          reduce using rule 68 (empty -> .)
    ID              shift and go to state 47
    IF              shift and go to state 48
    DO              shift and go to state 49
    PRINT           shift and go to state 50

    statement                      shift and go to state 40
    more_statements                shift and go to state 57
    list_statements                shift and go to state 58
    empty                          shift and go to state 41
    assign                         shift and go to state 42
    condition                      shift and go to state 43
    cycle                          shift and go to state 44
    f_call                         shift and go to state 45
    print                          shift and go to state 46

state 41

    (29) list_statements -> empty .

    RBRACE          reduce using rule 29 (list_statements -> empty .)


state 42

    (23) statement -> assign .

    ID              reduce using rule 23 (statement -> assign .)
    IF              reduce using rule 23 (statement -> assign .)
    DO              reduce using rule 23 (statement -> assign .)
    PRINT           reduce using rule 23 (statement -> assign .)
    RBRACE          reduce using rule 23 (statement -> assign .)


state 43

    (24) statement -> condition .

    ID              reduce using rule 24 (statement -> condition .)
    IF              reduce using rule 24 (statement -> condition .)
    DO              reduce using rule 24 (statement -> condition .)
    PRINT           reduce using rule 24 (statement -> condition .)
    RBRACE          reduce using rule 24 (statement -> condition .)


state 44

    (25) statement -> cycle .

    ID              reduce using rule 25 (statement -> cycle .)
    IF              reduce using rule 25 (statement -> cycle .)
    DO              reduce using rule 25 (statement -> cycle .)
    PRINT           reduce using rule 25 (statement -> cycle .)
    RBRACE          reduce using rule 25 (statement -> cycle .)


state 45

    (26) statement -> f_call .

    ID              reduce using rule 26 (statement -> f_call .)
    IF              reduce using rule 26 (statement -> f_call .)
    DO              reduce using rule 26 (statement -> f_call .)
    PRINT           reduce using rule 26 (statement -> f_call .)
    RBRACE          reduce using rule 26 (statement -> f_call .)


state 46

    (27) statement -> print .

    ID              reduce using rule 27 (statement -> print .)
    IF              reduce using rule 27 (statement -> print .)
    DO              reduce using rule 27 (statement -> print .)
    PRINT           reduce using rule 27 (statement -> print .)
    RBRACE          reduce using rule 27 (statement -> print .)


state 47

    (31) assign -> ID . ASSIGN expresion ENDINSTRUC
    (58) f_call -> ID . LPAREN list_exp RPAREN ENDINSTRUC

    ASSIGN          shift and go to state 59
    LPAREN          shift and go to state 60


state 48

    (54) condition -> IF . LPAREN expresion RPAREN body else_block ENDINSTRUC

    LPAREN          shift and go to state 61


state 49

    (57) cycle -> DO . body WHILE LPAREN expresion RPAREN ENDINSTRUC
    (22) body -> . LBRACE list_statements RBRACE

    LBRACE          shift and go to state 34

    body                           shift and go to state 62

state 50

    (63) print -> PRINT . LPAREN print_opt RPAREN ENDINSTRUC

    LPAREN          shift and go to state 63


state 51

    (13) funcs -> func_start LPAREN list_params RPAREN LBRACKET . vars body RBRACKET ENDINSTRUC
    (2) vars -> . VAR variables
    (3) vars -> . empty
    (68) empty -> .

    VAR             shift and go to state 6
    LBRACE          reduce using rule 68 (empty -> .)

    vars                           shift and go to state 64
    empty                          shift and go to state 7

state 52

    (18) list_params -> ID COLON type . mas_params
    (20) mas_params -> . COMMA list_params
    (21) mas_params -> . empty
    (68) empty -> .

    COMMA           shift and go to state 66
    RPAREN          reduce using rule 68 (empty -> .)

    mas_params                     shift and go to state 65
    empty                          shift and go to state 67

state 53

    (4) variables -> list_ids COLON type ENDINSTRUC mas_vars .

    VOID            reduce using rule 4 (variables -> list_ids COLON type ENDINSTRUC mas_vars .)
    MAIN            reduce using rule 4 (variables -> list_ids COLON type ENDINSTRUC mas_vars .)
    LBRACE          reduce using rule 4 (variables -> list_ids COLON type ENDINSTRUC mas_vars .)


state 54

    (8) mas_vars -> variables .

    VOID            reduce using rule 8 (mas_vars -> variables .)
    MAIN            reduce using rule 8 (mas_vars -> variables .)
    LBRACE          reduce using rule 8 (mas_vars -> variables .)


state 55

    (9) mas_vars -> empty .

    VOID            reduce using rule 9 (mas_vars -> empty .)
    MAIN            reduce using rule 9 (mas_vars -> empty .)
    LBRACE          reduce using rule 9 (mas_vars -> empty .)


state 56

    (22) body -> LBRACE list_statements RBRACE .

    END             reduce using rule 22 (body -> LBRACE list_statements RBRACE .)
    WHILE           reduce using rule 22 (body -> LBRACE list_statements RBRACE .)
    RBRACKET        reduce using rule 22 (body -> LBRACE list_statements RBRACE .)
    ELSE            reduce using rule 22 (body -> LBRACE list_statements RBRACE .)
    ENDINSTRUC      reduce using rule 22 (body -> LBRACE list_statements RBRACE .)


state 57

    (28) list_statements -> statement more_statements .

    RBRACE          reduce using rule 28 (list_statements -> statement more_statements .)


state 58

    (30) more_statements -> list_statements .

    RBRACE          reduce using rule 30 (more_statements -> list_statements .)


state 59

    (31) assign -> ID ASSIGN . expresion ENDINSTRUC
    (32) expresion -> . exp mas_expresiones
    (37) exp -> . termino mas_exp
    (41) termino -> . factor mas_terminos
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . factor_opt
    (47) factor -> . PLUS factor_opt
    (48) factor -> . MINUS factor_opt
    (49) factor_opt -> . cte
    (50) factor_opt -> . ID
    (51) cte -> . CTEINT
    (52) cte -> . CTEFLOAT
    (53) cte -> . CTEBOOL

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 68
    CTEINT          shift and go to state 78
    CTEFLOAT        shift and go to state 79
    CTEBOOL         shift and go to state 80

    expresion                      shift and go to state 69
    exp                            shift and go to state 70
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    factor_opt                     shift and go to state 74
    cte                            shift and go to state 77

state 60

    (58) f_call -> ID LPAREN . list_exp RPAREN ENDINSTRUC
    (59) list_exp -> . expresion mas_list_exp
    (60) list_exp -> . empty
    (32) expresion -> . exp mas_expresiones
    (68) empty -> .
    (37) exp -> . termino mas_exp
    (41) termino -> . factor mas_terminos
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . factor_opt
    (47) factor -> . PLUS factor_opt
    (48) factor -> . MINUS factor_opt
    (49) factor_opt -> . cte
    (50) factor_opt -> . ID
    (51) cte -> . CTEINT
    (52) cte -> . CTEFLOAT
    (53) cte -> . CTEBOOL

    RPAREN          reduce using rule 68 (empty -> .)
    LPAREN          shift and go to state 73
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 68
    CTEINT          shift and go to state 78
    CTEFLOAT        shift and go to state 79
    CTEBOOL         shift and go to state 80

    list_exp                       shift and go to state 81
    expresion                      shift and go to state 82
    empty                          shift and go to state 83
    exp                            shift and go to state 70
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    factor_opt                     shift and go to state 74
    cte                            shift and go to state 77

state 61

    (54) condition -> IF LPAREN . expresion RPAREN body else_block ENDINSTRUC
    (32) expresion -> . exp mas_expresiones
    (37) exp -> . termino mas_exp
    (41) termino -> . factor mas_terminos
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . factor_opt
    (47) factor -> . PLUS factor_opt
    (48) factor -> . MINUS factor_opt
    (49) factor_opt -> . cte
    (50) factor_opt -> . ID
    (51) cte -> . CTEINT
    (52) cte -> . CTEFLOAT
    (53) cte -> . CTEBOOL

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 68
    CTEINT          shift and go to state 78
    CTEFLOAT        shift and go to state 79
    CTEBOOL         shift and go to state 80

    expresion                      shift and go to state 84
    exp                            shift and go to state 70
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    factor_opt                     shift and go to state 74
    cte                            shift and go to state 77

state 62

    (57) cycle -> DO body . WHILE LPAREN expresion RPAREN ENDINSTRUC

    WHILE           shift and go to state 85


state 63

    (63) print -> PRINT LPAREN . print_opt RPAREN ENDINSTRUC
    (64) print_opt -> . expresion more_opt
    (65) print_opt -> . CTESTRING more_opt
    (32) expresion -> . exp mas_expresiones
    (37) exp -> . termino mas_exp
    (41) termino -> . factor mas_terminos
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . factor_opt
    (47) factor -> . PLUS factor_opt
    (48) factor -> . MINUS factor_opt
    (49) factor_opt -> . cte
    (50) factor_opt -> . ID
    (51) cte -> . CTEINT
    (52) cte -> . CTEFLOAT
    (53) cte -> . CTEBOOL

    CTESTRING       shift and go to state 88
    LPAREN          shift and go to state 73
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 68
    CTEINT          shift and go to state 78
    CTEFLOAT        shift and go to state 79
    CTEBOOL         shift and go to state 80

    print_opt                      shift and go to state 86
    expresion                      shift and go to state 87
    exp                            shift and go to state 70
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    factor_opt                     shift and go to state 74
    cte                            shift and go to state 77

state 64

    (13) funcs -> func_start LPAREN list_params RPAREN LBRACKET vars . body RBRACKET ENDINSTRUC
    (22) body -> . LBRACE list_statements RBRACE

    LBRACE          shift and go to state 34

    body                           shift and go to state 89

state 65

    (18) list_params -> ID COLON type mas_params .

    RPAREN          reduce using rule 18 (list_params -> ID COLON type mas_params .)


state 66

    (20) mas_params -> COMMA . list_params
    (18) list_params -> . ID COLON type mas_params
    (19) list_params -> . empty
    (68) empty -> .

    ID              shift and go to state 26
    RPAREN          reduce using rule 68 (empty -> .)

    list_params                    shift and go to state 90
    empty                          shift and go to state 27

state 67

    (21) mas_params -> empty .

    RPAREN          reduce using rule 21 (mas_params -> empty .)


state 68

    (50) factor_opt -> ID .

    TIMES           reduce using rule 50 (factor_opt -> ID .)
    DIVIDE          reduce using rule 50 (factor_opt -> ID .)
    PLUS            reduce using rule 50 (factor_opt -> ID .)
    MINUS           reduce using rule 50 (factor_opt -> ID .)
    GREATERTHAN     reduce using rule 50 (factor_opt -> ID .)
    LESSTHAN        reduce using rule 50 (factor_opt -> ID .)
    NOTEQUAL        reduce using rule 50 (factor_opt -> ID .)
    ENDINSTRUC      reduce using rule 50 (factor_opt -> ID .)
    COMMA           reduce using rule 50 (factor_opt -> ID .)
    RPAREN          reduce using rule 50 (factor_opt -> ID .)


state 69

    (31) assign -> ID ASSIGN expresion . ENDINSTRUC

    ENDINSTRUC      shift and go to state 91


state 70

    (32) expresion -> exp . mas_expresiones
    (33) mas_expresiones -> . GREATERTHAN exp
    (34) mas_expresiones -> . LESSTHAN exp
    (35) mas_expresiones -> . NOTEQUAL exp
    (36) mas_expresiones -> . empty
    (68) empty -> .

    GREATERTHAN     shift and go to state 93
    LESSTHAN        shift and go to state 94
    NOTEQUAL        shift and go to state 95
    ENDINSTRUC      reduce using rule 68 (empty -> .)
    COMMA           reduce using rule 68 (empty -> .)
    RPAREN          reduce using rule 68 (empty -> .)

    mas_expresiones                shift and go to state 92
    empty                          shift and go to state 96

state 71

    (37) exp -> termino . mas_exp
    (38) mas_exp -> . PLUS exp
    (39) mas_exp -> . MINUS exp
    (40) mas_exp -> . empty
    (68) empty -> .

    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    GREATERTHAN     reduce using rule 68 (empty -> .)
    LESSTHAN        reduce using rule 68 (empty -> .)
    NOTEQUAL        reduce using rule 68 (empty -> .)
    ENDINSTRUC      reduce using rule 68 (empty -> .)
    COMMA           reduce using rule 68 (empty -> .)
    RPAREN          reduce using rule 68 (empty -> .)

    mas_exp                        shift and go to state 97
    empty                          shift and go to state 100

state 72

    (41) termino -> factor . mas_terminos
    (42) mas_terminos -> . TIMES termino
    (43) mas_terminos -> . DIVIDE termino
    (44) mas_terminos -> . empty
    (68) empty -> .

    TIMES           shift and go to state 102
    DIVIDE          shift and go to state 103
    PLUS            reduce using rule 68 (empty -> .)
    MINUS           reduce using rule 68 (empty -> .)
    GREATERTHAN     reduce using rule 68 (empty -> .)
    LESSTHAN        reduce using rule 68 (empty -> .)
    NOTEQUAL        reduce using rule 68 (empty -> .)
    ENDINSTRUC      reduce using rule 68 (empty -> .)
    COMMA           reduce using rule 68 (empty -> .)
    RPAREN          reduce using rule 68 (empty -> .)

    mas_terminos                   shift and go to state 101
    empty                          shift and go to state 104

state 73

    (45) factor -> LPAREN . expresion RPAREN
    (32) expresion -> . exp mas_expresiones
    (37) exp -> . termino mas_exp
    (41) termino -> . factor mas_terminos
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . factor_opt
    (47) factor -> . PLUS factor_opt
    (48) factor -> . MINUS factor_opt
    (49) factor_opt -> . cte
    (50) factor_opt -> . ID
    (51) cte -> . CTEINT
    (52) cte -> . CTEFLOAT
    (53) cte -> . CTEBOOL

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 68
    CTEINT          shift and go to state 78
    CTEFLOAT        shift and go to state 79
    CTEBOOL         shift and go to state 80

    expresion                      shift and go to state 105
    exp                            shift and go to state 70
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    factor_opt                     shift and go to state 74
    cte                            shift and go to state 77

state 74

    (46) factor -> factor_opt .

    TIMES           reduce using rule 46 (factor -> factor_opt .)
    DIVIDE          reduce using rule 46 (factor -> factor_opt .)
    PLUS            reduce using rule 46 (factor -> factor_opt .)
    MINUS           reduce using rule 46 (factor -> factor_opt .)
    GREATERTHAN     reduce using rule 46 (factor -> factor_opt .)
    LESSTHAN        reduce using rule 46 (factor -> factor_opt .)
    NOTEQUAL        reduce using rule 46 (factor -> factor_opt .)
    ENDINSTRUC      reduce using rule 46 (factor -> factor_opt .)
    COMMA           reduce using rule 46 (factor -> factor_opt .)
    RPAREN          reduce using rule 46 (factor -> factor_opt .)


state 75

    (47) factor -> PLUS . factor_opt
    (49) factor_opt -> . cte
    (50) factor_opt -> . ID
    (51) cte -> . CTEINT
    (52) cte -> . CTEFLOAT
    (53) cte -> . CTEBOOL

    ID              shift and go to state 68
    CTEINT          shift and go to state 78
    CTEFLOAT        shift and go to state 79
    CTEBOOL         shift and go to state 80

    factor_opt                     shift and go to state 106
    cte                            shift and go to state 77

state 76

    (48) factor -> MINUS . factor_opt
    (49) factor_opt -> . cte
    (50) factor_opt -> . ID
    (51) cte -> . CTEINT
    (52) cte -> . CTEFLOAT
    (53) cte -> . CTEBOOL

    ID              shift and go to state 68
    CTEINT          shift and go to state 78
    CTEFLOAT        shift and go to state 79
    CTEBOOL         shift and go to state 80

    factor_opt                     shift and go to state 107
    cte                            shift and go to state 77

state 77

    (49) factor_opt -> cte .

    TIMES           reduce using rule 49 (factor_opt -> cte .)
    DIVIDE          reduce using rule 49 (factor_opt -> cte .)
    PLUS            reduce using rule 49 (factor_opt -> cte .)
    MINUS           reduce using rule 49 (factor_opt -> cte .)
    GREATERTHAN     reduce using rule 49 (factor_opt -> cte .)
    LESSTHAN        reduce using rule 49 (factor_opt -> cte .)
    NOTEQUAL        reduce using rule 49 (factor_opt -> cte .)
    ENDINSTRUC      reduce using rule 49 (factor_opt -> cte .)
    COMMA           reduce using rule 49 (factor_opt -> cte .)
    RPAREN          reduce using rule 49 (factor_opt -> cte .)


state 78

    (51) cte -> CTEINT .

    TIMES           reduce using rule 51 (cte -> CTEINT .)
    DIVIDE          reduce using rule 51 (cte -> CTEINT .)
    PLUS            reduce using rule 51 (cte -> CTEINT .)
    MINUS           reduce using rule 51 (cte -> CTEINT .)
    GREATERTHAN     reduce using rule 51 (cte -> CTEINT .)
    LESSTHAN        reduce using rule 51 (cte -> CTEINT .)
    NOTEQUAL        reduce using rule 51 (cte -> CTEINT .)
    ENDINSTRUC      reduce using rule 51 (cte -> CTEINT .)
    COMMA           reduce using rule 51 (cte -> CTEINT .)
    RPAREN          reduce using rule 51 (cte -> CTEINT .)


state 79

    (52) cte -> CTEFLOAT .

    TIMES           reduce using rule 52 (cte -> CTEFLOAT .)
    DIVIDE          reduce using rule 52 (cte -> CTEFLOAT .)
    PLUS            reduce using rule 52 (cte -> CTEFLOAT .)
    MINUS           reduce using rule 52 (cte -> CTEFLOAT .)
    GREATERTHAN     reduce using rule 52 (cte -> CTEFLOAT .)
    LESSTHAN        reduce using rule 52 (cte -> CTEFLOAT .)
    NOTEQUAL        reduce using rule 52 (cte -> CTEFLOAT .)
    ENDINSTRUC      reduce using rule 52 (cte -> CTEFLOAT .)
    COMMA           reduce using rule 52 (cte -> CTEFLOAT .)
    RPAREN          reduce using rule 52 (cte -> CTEFLOAT .)


state 80

    (53) cte -> CTEBOOL .

    TIMES           reduce using rule 53 (cte -> CTEBOOL .)
    DIVIDE          reduce using rule 53 (cte -> CTEBOOL .)
    PLUS            reduce using rule 53 (cte -> CTEBOOL .)
    MINUS           reduce using rule 53 (cte -> CTEBOOL .)
    GREATERTHAN     reduce using rule 53 (cte -> CTEBOOL .)
    LESSTHAN        reduce using rule 53 (cte -> CTEBOOL .)
    NOTEQUAL        reduce using rule 53 (cte -> CTEBOOL .)
    ENDINSTRUC      reduce using rule 53 (cte -> CTEBOOL .)
    COMMA           reduce using rule 53 (cte -> CTEBOOL .)
    RPAREN          reduce using rule 53 (cte -> CTEBOOL .)


state 81

    (58) f_call -> ID LPAREN list_exp . RPAREN ENDINSTRUC

    RPAREN          shift and go to state 108


state 82

    (59) list_exp -> expresion . mas_list_exp
    (61) mas_list_exp -> . COMMA list_exp
    (62) mas_list_exp -> . empty
    (68) empty -> .

    COMMA           shift and go to state 110
    RPAREN          reduce using rule 68 (empty -> .)

    mas_list_exp                   shift and go to state 109
    empty                          shift and go to state 111

state 83

    (60) list_exp -> empty .

    RPAREN          reduce using rule 60 (list_exp -> empty .)


state 84

    (54) condition -> IF LPAREN expresion . RPAREN body else_block ENDINSTRUC

    RPAREN          shift and go to state 112


state 85

    (57) cycle -> DO body WHILE . LPAREN expresion RPAREN ENDINSTRUC

    LPAREN          shift and go to state 113


state 86

    (63) print -> PRINT LPAREN print_opt . RPAREN ENDINSTRUC

    RPAREN          shift and go to state 114


state 87

    (64) print_opt -> expresion . more_opt
    (66) more_opt -> . COMMA print_opt
    (67) more_opt -> . empty
    (68) empty -> .

    COMMA           shift and go to state 116
    RPAREN          reduce using rule 68 (empty -> .)

    more_opt                       shift and go to state 115
    empty                          shift and go to state 117

state 88

    (65) print_opt -> CTESTRING . more_opt
    (66) more_opt -> . COMMA print_opt
    (67) more_opt -> . empty
    (68) empty -> .

    COMMA           shift and go to state 116
    RPAREN          reduce using rule 68 (empty -> .)

    more_opt                       shift and go to state 118
    empty                          shift and go to state 117

state 89

    (13) funcs -> func_start LPAREN list_params RPAREN LBRACKET vars body . RBRACKET ENDINSTRUC

    RBRACKET        shift and go to state 119


state 90

    (20) mas_params -> COMMA list_params .

    RPAREN          reduce using rule 20 (mas_params -> COMMA list_params .)


state 91

    (31) assign -> ID ASSIGN expresion ENDINSTRUC .

    ID              reduce using rule 31 (assign -> ID ASSIGN expresion ENDINSTRUC .)
    IF              reduce using rule 31 (assign -> ID ASSIGN expresion ENDINSTRUC .)
    DO              reduce using rule 31 (assign -> ID ASSIGN expresion ENDINSTRUC .)
    PRINT           reduce using rule 31 (assign -> ID ASSIGN expresion ENDINSTRUC .)
    RBRACE          reduce using rule 31 (assign -> ID ASSIGN expresion ENDINSTRUC .)


state 92

    (32) expresion -> exp mas_expresiones .

    ENDINSTRUC      reduce using rule 32 (expresion -> exp mas_expresiones .)
    COMMA           reduce using rule 32 (expresion -> exp mas_expresiones .)
    RPAREN          reduce using rule 32 (expresion -> exp mas_expresiones .)


state 93

    (33) mas_expresiones -> GREATERTHAN . exp
    (37) exp -> . termino mas_exp
    (41) termino -> . factor mas_terminos
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . factor_opt
    (47) factor -> . PLUS factor_opt
    (48) factor -> . MINUS factor_opt
    (49) factor_opt -> . cte
    (50) factor_opt -> . ID
    (51) cte -> . CTEINT
    (52) cte -> . CTEFLOAT
    (53) cte -> . CTEBOOL

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 68
    CTEINT          shift and go to state 78
    CTEFLOAT        shift and go to state 79
    CTEBOOL         shift and go to state 80

    exp                            shift and go to state 120
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    factor_opt                     shift and go to state 74
    cte                            shift and go to state 77

state 94

    (34) mas_expresiones -> LESSTHAN . exp
    (37) exp -> . termino mas_exp
    (41) termino -> . factor mas_terminos
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . factor_opt
    (47) factor -> . PLUS factor_opt
    (48) factor -> . MINUS factor_opt
    (49) factor_opt -> . cte
    (50) factor_opt -> . ID
    (51) cte -> . CTEINT
    (52) cte -> . CTEFLOAT
    (53) cte -> . CTEBOOL

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 68
    CTEINT          shift and go to state 78
    CTEFLOAT        shift and go to state 79
    CTEBOOL         shift and go to state 80

    exp                            shift and go to state 121
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    factor_opt                     shift and go to state 74
    cte                            shift and go to state 77

state 95

    (35) mas_expresiones -> NOTEQUAL . exp
    (37) exp -> . termino mas_exp
    (41) termino -> . factor mas_terminos
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . factor_opt
    (47) factor -> . PLUS factor_opt
    (48) factor -> . MINUS factor_opt
    (49) factor_opt -> . cte
    (50) factor_opt -> . ID
    (51) cte -> . CTEINT
    (52) cte -> . CTEFLOAT
    (53) cte -> . CTEBOOL

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 68
    CTEINT          shift and go to state 78
    CTEFLOAT        shift and go to state 79
    CTEBOOL         shift and go to state 80

    exp                            shift and go to state 122
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    factor_opt                     shift and go to state 74
    cte                            shift and go to state 77

state 96

    (36) mas_expresiones -> empty .

    ENDINSTRUC      reduce using rule 36 (mas_expresiones -> empty .)
    COMMA           reduce using rule 36 (mas_expresiones -> empty .)
    RPAREN          reduce using rule 36 (mas_expresiones -> empty .)


state 97

    (37) exp -> termino mas_exp .

    GREATERTHAN     reduce using rule 37 (exp -> termino mas_exp .)
    LESSTHAN        reduce using rule 37 (exp -> termino mas_exp .)
    NOTEQUAL        reduce using rule 37 (exp -> termino mas_exp .)
    ENDINSTRUC      reduce using rule 37 (exp -> termino mas_exp .)
    COMMA           reduce using rule 37 (exp -> termino mas_exp .)
    RPAREN          reduce using rule 37 (exp -> termino mas_exp .)


state 98

    (38) mas_exp -> PLUS . exp
    (37) exp -> . termino mas_exp
    (41) termino -> . factor mas_terminos
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . factor_opt
    (47) factor -> . PLUS factor_opt
    (48) factor -> . MINUS factor_opt
    (49) factor_opt -> . cte
    (50) factor_opt -> . ID
    (51) cte -> . CTEINT
    (52) cte -> . CTEFLOAT
    (53) cte -> . CTEBOOL

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 68
    CTEINT          shift and go to state 78
    CTEFLOAT        shift and go to state 79
    CTEBOOL         shift and go to state 80

    exp                            shift and go to state 123
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    factor_opt                     shift and go to state 74
    cte                            shift and go to state 77

state 99

    (39) mas_exp -> MINUS . exp
    (37) exp -> . termino mas_exp
    (41) termino -> . factor mas_terminos
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . factor_opt
    (47) factor -> . PLUS factor_opt
    (48) factor -> . MINUS factor_opt
    (49) factor_opt -> . cte
    (50) factor_opt -> . ID
    (51) cte -> . CTEINT
    (52) cte -> . CTEFLOAT
    (53) cte -> . CTEBOOL

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 68
    CTEINT          shift and go to state 78
    CTEFLOAT        shift and go to state 79
    CTEBOOL         shift and go to state 80

    exp                            shift and go to state 124
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    factor_opt                     shift and go to state 74
    cte                            shift and go to state 77

state 100

    (40) mas_exp -> empty .

    GREATERTHAN     reduce using rule 40 (mas_exp -> empty .)
    LESSTHAN        reduce using rule 40 (mas_exp -> empty .)
    NOTEQUAL        reduce using rule 40 (mas_exp -> empty .)
    ENDINSTRUC      reduce using rule 40 (mas_exp -> empty .)
    COMMA           reduce using rule 40 (mas_exp -> empty .)
    RPAREN          reduce using rule 40 (mas_exp -> empty .)


state 101

    (41) termino -> factor mas_terminos .

    PLUS            reduce using rule 41 (termino -> factor mas_terminos .)
    MINUS           reduce using rule 41 (termino -> factor mas_terminos .)
    GREATERTHAN     reduce using rule 41 (termino -> factor mas_terminos .)
    LESSTHAN        reduce using rule 41 (termino -> factor mas_terminos .)
    NOTEQUAL        reduce using rule 41 (termino -> factor mas_terminos .)
    ENDINSTRUC      reduce using rule 41 (termino -> factor mas_terminos .)
    COMMA           reduce using rule 41 (termino -> factor mas_terminos .)
    RPAREN          reduce using rule 41 (termino -> factor mas_terminos .)


state 102

    (42) mas_terminos -> TIMES . termino
    (41) termino -> . factor mas_terminos
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . factor_opt
    (47) factor -> . PLUS factor_opt
    (48) factor -> . MINUS factor_opt
    (49) factor_opt -> . cte
    (50) factor_opt -> . ID
    (51) cte -> . CTEINT
    (52) cte -> . CTEFLOAT
    (53) cte -> . CTEBOOL

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 68
    CTEINT          shift and go to state 78
    CTEFLOAT        shift and go to state 79
    CTEBOOL         shift and go to state 80

    termino                        shift and go to state 125
    factor                         shift and go to state 72
    factor_opt                     shift and go to state 74
    cte                            shift and go to state 77

state 103

    (43) mas_terminos -> DIVIDE . termino
    (41) termino -> . factor mas_terminos
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . factor_opt
    (47) factor -> . PLUS factor_opt
    (48) factor -> . MINUS factor_opt
    (49) factor_opt -> . cte
    (50) factor_opt -> . ID
    (51) cte -> . CTEINT
    (52) cte -> . CTEFLOAT
    (53) cte -> . CTEBOOL

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 68
    CTEINT          shift and go to state 78
    CTEFLOAT        shift and go to state 79
    CTEBOOL         shift and go to state 80

    termino                        shift and go to state 126
    factor                         shift and go to state 72
    factor_opt                     shift and go to state 74
    cte                            shift and go to state 77

state 104

    (44) mas_terminos -> empty .

    PLUS            reduce using rule 44 (mas_terminos -> empty .)
    MINUS           reduce using rule 44 (mas_terminos -> empty .)
    GREATERTHAN     reduce using rule 44 (mas_terminos -> empty .)
    LESSTHAN        reduce using rule 44 (mas_terminos -> empty .)
    NOTEQUAL        reduce using rule 44 (mas_terminos -> empty .)
    ENDINSTRUC      reduce using rule 44 (mas_terminos -> empty .)
    COMMA           reduce using rule 44 (mas_terminos -> empty .)
    RPAREN          reduce using rule 44 (mas_terminos -> empty .)


state 105

    (45) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 127


state 106

    (47) factor -> PLUS factor_opt .

    TIMES           reduce using rule 47 (factor -> PLUS factor_opt .)
    DIVIDE          reduce using rule 47 (factor -> PLUS factor_opt .)
    PLUS            reduce using rule 47 (factor -> PLUS factor_opt .)
    MINUS           reduce using rule 47 (factor -> PLUS factor_opt .)
    GREATERTHAN     reduce using rule 47 (factor -> PLUS factor_opt .)
    LESSTHAN        reduce using rule 47 (factor -> PLUS factor_opt .)
    NOTEQUAL        reduce using rule 47 (factor -> PLUS factor_opt .)
    ENDINSTRUC      reduce using rule 47 (factor -> PLUS factor_opt .)
    COMMA           reduce using rule 47 (factor -> PLUS factor_opt .)
    RPAREN          reduce using rule 47 (factor -> PLUS factor_opt .)


state 107

    (48) factor -> MINUS factor_opt .

    TIMES           reduce using rule 48 (factor -> MINUS factor_opt .)
    DIVIDE          reduce using rule 48 (factor -> MINUS factor_opt .)
    PLUS            reduce using rule 48 (factor -> MINUS factor_opt .)
    MINUS           reduce using rule 48 (factor -> MINUS factor_opt .)
    GREATERTHAN     reduce using rule 48 (factor -> MINUS factor_opt .)
    LESSTHAN        reduce using rule 48 (factor -> MINUS factor_opt .)
    NOTEQUAL        reduce using rule 48 (factor -> MINUS factor_opt .)
    ENDINSTRUC      reduce using rule 48 (factor -> MINUS factor_opt .)
    COMMA           reduce using rule 48 (factor -> MINUS factor_opt .)
    RPAREN          reduce using rule 48 (factor -> MINUS factor_opt .)


state 108

    (58) f_call -> ID LPAREN list_exp RPAREN . ENDINSTRUC

    ENDINSTRUC      shift and go to state 128


state 109

    (59) list_exp -> expresion mas_list_exp .

    RPAREN          reduce using rule 59 (list_exp -> expresion mas_list_exp .)


state 110

    (61) mas_list_exp -> COMMA . list_exp
    (59) list_exp -> . expresion mas_list_exp
    (60) list_exp -> . empty
    (32) expresion -> . exp mas_expresiones
    (68) empty -> .
    (37) exp -> . termino mas_exp
    (41) termino -> . factor mas_terminos
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . factor_opt
    (47) factor -> . PLUS factor_opt
    (48) factor -> . MINUS factor_opt
    (49) factor_opt -> . cte
    (50) factor_opt -> . ID
    (51) cte -> . CTEINT
    (52) cte -> . CTEFLOAT
    (53) cte -> . CTEBOOL

    RPAREN          reduce using rule 68 (empty -> .)
    LPAREN          shift and go to state 73
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 68
    CTEINT          shift and go to state 78
    CTEFLOAT        shift and go to state 79
    CTEBOOL         shift and go to state 80

    list_exp                       shift and go to state 129
    expresion                      shift and go to state 82
    empty                          shift and go to state 83
    exp                            shift and go to state 70
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    factor_opt                     shift and go to state 74
    cte                            shift and go to state 77

state 111

    (62) mas_list_exp -> empty .

    RPAREN          reduce using rule 62 (mas_list_exp -> empty .)


state 112

    (54) condition -> IF LPAREN expresion RPAREN . body else_block ENDINSTRUC
    (22) body -> . LBRACE list_statements RBRACE

    LBRACE          shift and go to state 34

    body                           shift and go to state 130

state 113

    (57) cycle -> DO body WHILE LPAREN . expresion RPAREN ENDINSTRUC
    (32) expresion -> . exp mas_expresiones
    (37) exp -> . termino mas_exp
    (41) termino -> . factor mas_terminos
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . factor_opt
    (47) factor -> . PLUS factor_opt
    (48) factor -> . MINUS factor_opt
    (49) factor_opt -> . cte
    (50) factor_opt -> . ID
    (51) cte -> . CTEINT
    (52) cte -> . CTEFLOAT
    (53) cte -> . CTEBOOL

    LPAREN          shift and go to state 73
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 68
    CTEINT          shift and go to state 78
    CTEFLOAT        shift and go to state 79
    CTEBOOL         shift and go to state 80

    expresion                      shift and go to state 131
    exp                            shift and go to state 70
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    factor_opt                     shift and go to state 74
    cte                            shift and go to state 77

state 114

    (63) print -> PRINT LPAREN print_opt RPAREN . ENDINSTRUC

    ENDINSTRUC      shift and go to state 132


state 115

    (64) print_opt -> expresion more_opt .

    RPAREN          reduce using rule 64 (print_opt -> expresion more_opt .)


state 116

    (66) more_opt -> COMMA . print_opt
    (64) print_opt -> . expresion more_opt
    (65) print_opt -> . CTESTRING more_opt
    (32) expresion -> . exp mas_expresiones
    (37) exp -> . termino mas_exp
    (41) termino -> . factor mas_terminos
    (45) factor -> . LPAREN expresion RPAREN
    (46) factor -> . factor_opt
    (47) factor -> . PLUS factor_opt
    (48) factor -> . MINUS factor_opt
    (49) factor_opt -> . cte
    (50) factor_opt -> . ID
    (51) cte -> . CTEINT
    (52) cte -> . CTEFLOAT
    (53) cte -> . CTEBOOL

    CTESTRING       shift and go to state 88
    LPAREN          shift and go to state 73
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    ID              shift and go to state 68
    CTEINT          shift and go to state 78
    CTEFLOAT        shift and go to state 79
    CTEBOOL         shift and go to state 80

    print_opt                      shift and go to state 133
    expresion                      shift and go to state 87
    exp                            shift and go to state 70
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    factor_opt                     shift and go to state 74
    cte                            shift and go to state 77

state 117

    (67) more_opt -> empty .

    RPAREN          reduce using rule 67 (more_opt -> empty .)


state 118

    (65) print_opt -> CTESTRING more_opt .

    RPAREN          reduce using rule 65 (print_opt -> CTESTRING more_opt .)


state 119

    (13) funcs -> func_start LPAREN list_params RPAREN LBRACKET vars body RBRACKET . ENDINSTRUC

    ENDINSTRUC      shift and go to state 134


state 120

    (33) mas_expresiones -> GREATERTHAN exp .

    ENDINSTRUC      reduce using rule 33 (mas_expresiones -> GREATERTHAN exp .)
    COMMA           reduce using rule 33 (mas_expresiones -> GREATERTHAN exp .)
    RPAREN          reduce using rule 33 (mas_expresiones -> GREATERTHAN exp .)


state 121

    (34) mas_expresiones -> LESSTHAN exp .

    ENDINSTRUC      reduce using rule 34 (mas_expresiones -> LESSTHAN exp .)
    COMMA           reduce using rule 34 (mas_expresiones -> LESSTHAN exp .)
    RPAREN          reduce using rule 34 (mas_expresiones -> LESSTHAN exp .)


state 122

    (35) mas_expresiones -> NOTEQUAL exp .

    ENDINSTRUC      reduce using rule 35 (mas_expresiones -> NOTEQUAL exp .)
    COMMA           reduce using rule 35 (mas_expresiones -> NOTEQUAL exp .)
    RPAREN          reduce using rule 35 (mas_expresiones -> NOTEQUAL exp .)


state 123

    (38) mas_exp -> PLUS exp .

    GREATERTHAN     reduce using rule 38 (mas_exp -> PLUS exp .)
    LESSTHAN        reduce using rule 38 (mas_exp -> PLUS exp .)
    NOTEQUAL        reduce using rule 38 (mas_exp -> PLUS exp .)
    ENDINSTRUC      reduce using rule 38 (mas_exp -> PLUS exp .)
    COMMA           reduce using rule 38 (mas_exp -> PLUS exp .)
    RPAREN          reduce using rule 38 (mas_exp -> PLUS exp .)


state 124

    (39) mas_exp -> MINUS exp .

    GREATERTHAN     reduce using rule 39 (mas_exp -> MINUS exp .)
    LESSTHAN        reduce using rule 39 (mas_exp -> MINUS exp .)
    NOTEQUAL        reduce using rule 39 (mas_exp -> MINUS exp .)
    ENDINSTRUC      reduce using rule 39 (mas_exp -> MINUS exp .)
    COMMA           reduce using rule 39 (mas_exp -> MINUS exp .)
    RPAREN          reduce using rule 39 (mas_exp -> MINUS exp .)


state 125

    (42) mas_terminos -> TIMES termino .

    PLUS            reduce using rule 42 (mas_terminos -> TIMES termino .)
    MINUS           reduce using rule 42 (mas_terminos -> TIMES termino .)
    GREATERTHAN     reduce using rule 42 (mas_terminos -> TIMES termino .)
    LESSTHAN        reduce using rule 42 (mas_terminos -> TIMES termino .)
    NOTEQUAL        reduce using rule 42 (mas_terminos -> TIMES termino .)
    ENDINSTRUC      reduce using rule 42 (mas_terminos -> TIMES termino .)
    COMMA           reduce using rule 42 (mas_terminos -> TIMES termino .)
    RPAREN          reduce using rule 42 (mas_terminos -> TIMES termino .)


state 126

    (43) mas_terminos -> DIVIDE termino .

    PLUS            reduce using rule 43 (mas_terminos -> DIVIDE termino .)
    MINUS           reduce using rule 43 (mas_terminos -> DIVIDE termino .)
    GREATERTHAN     reduce using rule 43 (mas_terminos -> DIVIDE termino .)
    LESSTHAN        reduce using rule 43 (mas_terminos -> DIVIDE termino .)
    NOTEQUAL        reduce using rule 43 (mas_terminos -> DIVIDE termino .)
    ENDINSTRUC      reduce using rule 43 (mas_terminos -> DIVIDE termino .)
    COMMA           reduce using rule 43 (mas_terminos -> DIVIDE termino .)
    RPAREN          reduce using rule 43 (mas_terminos -> DIVIDE termino .)


state 127

    (45) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    GREATERTHAN     reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    LESSTHAN        reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    NOTEQUAL        reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    ENDINSTRUC      reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    COMMA           reduce using rule 45 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 45 (factor -> LPAREN expresion RPAREN .)


state 128

    (58) f_call -> ID LPAREN list_exp RPAREN ENDINSTRUC .

    ID              reduce using rule 58 (f_call -> ID LPAREN list_exp RPAREN ENDINSTRUC .)
    IF              reduce using rule 58 (f_call -> ID LPAREN list_exp RPAREN ENDINSTRUC .)
    DO              reduce using rule 58 (f_call -> ID LPAREN list_exp RPAREN ENDINSTRUC .)
    PRINT           reduce using rule 58 (f_call -> ID LPAREN list_exp RPAREN ENDINSTRUC .)
    RBRACE          reduce using rule 58 (f_call -> ID LPAREN list_exp RPAREN ENDINSTRUC .)


state 129

    (61) mas_list_exp -> COMMA list_exp .

    RPAREN          reduce using rule 61 (mas_list_exp -> COMMA list_exp .)


state 130

    (54) condition -> IF LPAREN expresion RPAREN body . else_block ENDINSTRUC
    (55) else_block -> . ELSE body
    (56) else_block -> . empty
    (68) empty -> .

    ELSE            shift and go to state 136
    ENDINSTRUC      reduce using rule 68 (empty -> .)

    else_block                     shift and go to state 135
    empty                          shift and go to state 137

state 131

    (57) cycle -> DO body WHILE LPAREN expresion . RPAREN ENDINSTRUC

    RPAREN          shift and go to state 138


state 132

    (63) print -> PRINT LPAREN print_opt RPAREN ENDINSTRUC .

    ID              reduce using rule 63 (print -> PRINT LPAREN print_opt RPAREN ENDINSTRUC .)
    IF              reduce using rule 63 (print -> PRINT LPAREN print_opt RPAREN ENDINSTRUC .)
    DO              reduce using rule 63 (print -> PRINT LPAREN print_opt RPAREN ENDINSTRUC .)
    PRINT           reduce using rule 63 (print -> PRINT LPAREN print_opt RPAREN ENDINSTRUC .)
    RBRACE          reduce using rule 63 (print -> PRINT LPAREN print_opt RPAREN ENDINSTRUC .)


state 133

    (66) more_opt -> COMMA print_opt .

    RPAREN          reduce using rule 66 (more_opt -> COMMA print_opt .)


state 134

    (13) funcs -> func_start LPAREN list_params RPAREN LBRACKET vars body RBRACKET ENDINSTRUC .

    VOID            reduce using rule 13 (funcs -> func_start LPAREN list_params RPAREN LBRACKET vars body RBRACKET ENDINSTRUC .)
    MAIN            reduce using rule 13 (funcs -> func_start LPAREN list_params RPAREN LBRACKET vars body RBRACKET ENDINSTRUC .)


state 135

    (54) condition -> IF LPAREN expresion RPAREN body else_block . ENDINSTRUC

    ENDINSTRUC      shift and go to state 139


state 136

    (55) else_block -> ELSE . body
    (22) body -> . LBRACE list_statements RBRACE

    LBRACE          shift and go to state 34

    body                           shift and go to state 140

state 137

    (56) else_block -> empty .

    ENDINSTRUC      reduce using rule 56 (else_block -> empty .)


state 138

    (57) cycle -> DO body WHILE LPAREN expresion RPAREN . ENDINSTRUC

    ENDINSTRUC      shift and go to state 141


state 139

    (54) condition -> IF LPAREN expresion RPAREN body else_block ENDINSTRUC .

    ID              reduce using rule 54 (condition -> IF LPAREN expresion RPAREN body else_block ENDINSTRUC .)
    IF              reduce using rule 54 (condition -> IF LPAREN expresion RPAREN body else_block ENDINSTRUC .)
    DO              reduce using rule 54 (condition -> IF LPAREN expresion RPAREN body else_block ENDINSTRUC .)
    PRINT           reduce using rule 54 (condition -> IF LPAREN expresion RPAREN body else_block ENDINSTRUC .)
    RBRACE          reduce using rule 54 (condition -> IF LPAREN expresion RPAREN body else_block ENDINSTRUC .)


state 140

    (55) else_block -> ELSE body .

    ENDINSTRUC      reduce using rule 55 (else_block -> ELSE body .)


state 141

    (57) cycle -> DO body WHILE LPAREN expresion RPAREN ENDINSTRUC .

    ID              reduce using rule 57 (cycle -> DO body WHILE LPAREN expresion RPAREN ENDINSTRUC .)
    IF              reduce using rule 57 (cycle -> DO body WHILE LPAREN expresion RPAREN ENDINSTRUC .)
    DO              reduce using rule 57 (cycle -> DO body WHILE LPAREN expresion RPAREN ENDINSTRUC .)
    PRINT           reduce using rule 57 (cycle -> DO body WHILE LPAREN expresion RPAREN ENDINSTRUC .)
    RBRACE          reduce using rule 57 (cycle -> DO body WHILE LPAREN expresion RPAREN ENDINSTRUC .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VOID in state 5 resolved as shift
WARNING: reduce/reduce conflict in state 17 resolved using rule (funcs -> empty)
WARNING: rejected rule (mas_funcs -> empty) in state 17
WARNING: Rule (mas_funcs -> empty) is never reduced

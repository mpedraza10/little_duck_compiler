Created by PLY (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> PROGRAM ID ENDINSTRUC vars funcs MAIN body END
Rule 2     vars -> VAR variables
Rule 3     vars -> empty
Rule 4     variables -> list_ids COLON type ENDINSTRUC mas_vars
Rule 5     list_ids -> ID mas_ids
Rule 6     mas_ids -> COMMA list_ids
Rule 7     mas_ids -> empty
Rule 8     mas_vars -> variables
Rule 9     mas_vars -> empty
Rule 10    type -> INT
Rule 11    type -> FLOAT
Rule 12    type -> BOOL
Rule 13    funcs -> VOID ID LPAREN list_params RPAREN LBRACKET vars body RBRACKET ENDINSTRUC
Rule 14    funcs -> empty
Rule 15    list_params -> ID COLON type mas_params
Rule 16    list_params -> empty
Rule 17    mas_params -> COMMA list_params
Rule 18    mas_params -> empty
Rule 19    body -> LBRACE list_statements RBRACE
Rule 20    statement -> assign
Rule 21    statement -> condition
Rule 22    statement -> cycle
Rule 23    statement -> f_call
Rule 24    statement -> print
Rule 25    list_statements -> statement more_statements
Rule 26    list_statements -> empty
Rule 27    more_statements -> list_statements
Rule 28    assign -> ID ASSIGN expresion ENDINSTRUC
Rule 29    expresion -> exp mas_expresiones
Rule 30    mas_expresiones -> GREATERTHAN exp
Rule 31    mas_expresiones -> LESSTHAN exp
Rule 32    mas_expresiones -> NOTEQUAL exp
Rule 33    mas_expresiones -> empty
Rule 34    exp -> termino mas_exp
Rule 35    mas_exp -> PLUS exp
Rule 36    mas_exp -> MINUS exp
Rule 37    mas_exp -> empty
Rule 38    termino -> factor mas_terminos
Rule 39    mas_terminos -> TIMES termino
Rule 40    mas_terminos -> DIVIDE termino
Rule 41    mas_terminos -> empty
Rule 42    factor -> LPAREN expresion RPAREN
Rule 43    factor -> factor_opt
Rule 44    factor -> PLUS factor_opt
Rule 45    factor -> MINUS factor_opt
Rule 46    factor_opt -> cte
Rule 47    factor_opt -> ID
Rule 48    cte -> CTEINT
Rule 49    cte -> CTEFLOAT
Rule 50    cte -> CTEBOOL
Rule 51    condition -> IF LPAREN expresion RPAREN body else_block ENDINSTRUC
Rule 52    else_block -> ELSE body
Rule 53    else_block -> empty
Rule 54    cycle -> DO body WHILE LPAREN expresion RPAREN ENDINSTRUC
Rule 55    f_call -> ID LPAREN list_exp RPAREN ENDINSTRUC
Rule 56    list_exp -> expresion mas_list_exp
Rule 57    list_exp -> empty
Rule 58    mas_list_exp -> COMMA list_exp
Rule 59    mas_list_exp -> empty
Rule 60    print -> PRINT LPAREN print_opt RPAREN ENDINSTRUC
Rule 61    print_opt -> expresion more_opt
Rule 62    print_opt -> CTESTRING more_opt
Rule 63    more_opt -> COMMA print_opt
Rule 64    more_opt -> empty
Rule 65    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 28
BOOL                 : 12
COLON                : 4 15
COMMA                : 6 17 58 63
CTEBOOL              : 50
CTEFLOAT             : 49
CTEINT               : 48
CTESTRING            : 62
DIVIDE               : 40
DO                   : 54
ELSE                 : 52
END                  : 1
ENDINSTRUC           : 1 4 13 28 51 54 55 60
FLOAT                : 11
GREATERTHAN          : 30
ID                   : 1 5 13 15 28 47 55
IF                   : 51
INT                  : 10
LBRACE               : 19
LBRACKET             : 13
LESSTHAN             : 31
LPAREN               : 13 42 51 54 55 60
MAIN                 : 1
MINUS                : 36 45
NOTEQUAL             : 32
PLUS                 : 35 44
PRINT                : 60
PROGRAM              : 1
RBRACE               : 19
RBRACKET             : 13
RPAREN               : 13 42 51 54 55 60
TIMES                : 39
VAR                  : 2
VOID                 : 13
WHILE                : 54
error                : 

Nonterminals, with rules where they appear

assign               : 20
body                 : 1 13 51 52 54
condition            : 21
cte                  : 46
cycle                : 22
else_block           : 51
empty                : 3 7 9 14 16 18 26 33 37 41 53 57 59 64
exp                  : 29 30 31 32 35 36
expresion            : 28 42 51 54 56 61
f_call               : 23
factor               : 38
factor_opt           : 43 44 45
funcs                : 1
list_exp             : 55 58
list_ids             : 4 6
list_params          : 13 17
list_statements      : 19 27
mas_exp              : 34
mas_expresiones      : 29
mas_ids              : 5
mas_list_exp         : 56
mas_params           : 15
mas_terminos         : 38
mas_vars             : 4
more_opt             : 61 62
more_statements      : 25
print                : 24
print_opt            : 60 63
prog                 : 0
statement            : 25
termino              : 34 39 40
type                 : 4 15
variables            : 2 8
vars                 : 1 13


state 0

    (0) S' -> . prog
    (1) prog -> . PROGRAM ID ENDINSTRUC vars funcs MAIN body END

    PROGRAM         shift and go to state 2

    prog                           shift and go to state 1

state 1

    (0) S' -> prog .



state 2

    (1) prog -> PROGRAM . ID ENDINSTRUC vars funcs MAIN body END

    ID              shift and go to state 3


state 3

    (1) prog -> PROGRAM ID . ENDINSTRUC vars funcs MAIN body END

    ENDINSTRUC      shift and go to state 4


state 4

    (1) prog -> PROGRAM ID ENDINSTRUC . vars funcs MAIN body END
    (2) vars -> . VAR variables
    (3) vars -> . empty
    (65) empty -> .

    VAR             shift and go to state 6
    VOID            reduce using rule 65 (empty -> .)
    MAIN            reduce using rule 65 (empty -> .)

    vars                           shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) prog -> PROGRAM ID ENDINSTRUC vars . funcs MAIN body END
    (13) funcs -> . VOID ID LPAREN list_params RPAREN LBRACKET vars body RBRACKET ENDINSTRUC
    (14) funcs -> . empty
    (65) empty -> .

    VOID            shift and go to state 9
    MAIN            reduce using rule 65 (empty -> .)

    funcs                          shift and go to state 8
    empty                          shift and go to state 10

state 6

    (2) vars -> VAR . variables
    (4) variables -> . list_ids COLON type ENDINSTRUC mas_vars
    (5) list_ids -> . ID mas_ids

    ID              shift and go to state 13

    variables                      shift and go to state 11
    list_ids                       shift and go to state 12

state 7

    (3) vars -> empty .

    VOID            reduce using rule 3 (vars -> empty .)
    MAIN            reduce using rule 3 (vars -> empty .)
    LBRACE          reduce using rule 3 (vars -> empty .)


state 8

    (1) prog -> PROGRAM ID ENDINSTRUC vars funcs . MAIN body END

    MAIN            shift and go to state 14


state 9

    (13) funcs -> VOID . ID LPAREN list_params RPAREN LBRACKET vars body RBRACKET ENDINSTRUC

    ID              shift and go to state 15


state 10

    (14) funcs -> empty .

    MAIN            reduce using rule 14 (funcs -> empty .)


state 11

    (2) vars -> VAR variables .

    VOID            reduce using rule 2 (vars -> VAR variables .)
    MAIN            reduce using rule 2 (vars -> VAR variables .)
    LBRACE          reduce using rule 2 (vars -> VAR variables .)


state 12

    (4) variables -> list_ids . COLON type ENDINSTRUC mas_vars

    COLON           shift and go to state 16


state 13

    (5) list_ids -> ID . mas_ids
    (6) mas_ids -> . COMMA list_ids
    (7) mas_ids -> . empty
    (65) empty -> .

    COMMA           shift and go to state 18
    COLON           reduce using rule 65 (empty -> .)

    mas_ids                        shift and go to state 17
    empty                          shift and go to state 19

state 14

    (1) prog -> PROGRAM ID ENDINSTRUC vars funcs MAIN . body END
    (19) body -> . LBRACE list_statements RBRACE

    LBRACE          shift and go to state 21

    body                           shift and go to state 20

state 15

    (13) funcs -> VOID ID . LPAREN list_params RPAREN LBRACKET vars body RBRACKET ENDINSTRUC

    LPAREN          shift and go to state 22


state 16

    (4) variables -> list_ids COLON . type ENDINSTRUC mas_vars
    (10) type -> . INT
    (11) type -> . FLOAT
    (12) type -> . BOOL

    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    BOOL            shift and go to state 26

    type                           shift and go to state 23

state 17

    (5) list_ids -> ID mas_ids .

    COLON           reduce using rule 5 (list_ids -> ID mas_ids .)


state 18

    (6) mas_ids -> COMMA . list_ids
    (5) list_ids -> . ID mas_ids

    ID              shift and go to state 13

    list_ids                       shift and go to state 27

state 19

    (7) mas_ids -> empty .

    COLON           reduce using rule 7 (mas_ids -> empty .)


state 20

    (1) prog -> PROGRAM ID ENDINSTRUC vars funcs MAIN body . END

    END             shift and go to state 28


state 21

    (19) body -> LBRACE . list_statements RBRACE
    (25) list_statements -> . statement more_statements
    (26) list_statements -> . empty
    (20) statement -> . assign
    (21) statement -> . condition
    (22) statement -> . cycle
    (23) statement -> . f_call
    (24) statement -> . print
    (65) empty -> .
    (28) assign -> . ID ASSIGN expresion ENDINSTRUC
    (51) condition -> . IF LPAREN expresion RPAREN body else_block ENDINSTRUC
    (54) cycle -> . DO body WHILE LPAREN expresion RPAREN ENDINSTRUC
    (55) f_call -> . ID LPAREN list_exp RPAREN ENDINSTRUC
    (60) print -> . PRINT LPAREN print_opt RPAREN ENDINSTRUC

    RBRACE          reduce using rule 65 (empty -> .)
    ID              shift and go to state 37
    IF              shift and go to state 38
    DO              shift and go to state 39
    PRINT           shift and go to state 40

    list_statements                shift and go to state 29
    statement                      shift and go to state 30
    empty                          shift and go to state 31
    assign                         shift and go to state 32
    condition                      shift and go to state 33
    cycle                          shift and go to state 34
    f_call                         shift and go to state 35
    print                          shift and go to state 36

state 22

    (13) funcs -> VOID ID LPAREN . list_params RPAREN LBRACKET vars body RBRACKET ENDINSTRUC
    (15) list_params -> . ID COLON type mas_params
    (16) list_params -> . empty
    (65) empty -> .

    ID              shift and go to state 41
    RPAREN          reduce using rule 65 (empty -> .)

    list_params                    shift and go to state 42
    empty                          shift and go to state 43

state 23

    (4) variables -> list_ids COLON type . ENDINSTRUC mas_vars

    ENDINSTRUC      shift and go to state 44


state 24

    (10) type -> INT .

    ENDINSTRUC      reduce using rule 10 (type -> INT .)
    COMMA           reduce using rule 10 (type -> INT .)
    RPAREN          reduce using rule 10 (type -> INT .)


state 25

    (11) type -> FLOAT .

    ENDINSTRUC      reduce using rule 11 (type -> FLOAT .)
    COMMA           reduce using rule 11 (type -> FLOAT .)
    RPAREN          reduce using rule 11 (type -> FLOAT .)


state 26

    (12) type -> BOOL .

    ENDINSTRUC      reduce using rule 12 (type -> BOOL .)
    COMMA           reduce using rule 12 (type -> BOOL .)
    RPAREN          reduce using rule 12 (type -> BOOL .)


state 27

    (6) mas_ids -> COMMA list_ids .

    COLON           reduce using rule 6 (mas_ids -> COMMA list_ids .)


state 28

    (1) prog -> PROGRAM ID ENDINSTRUC vars funcs MAIN body END .

    $end            reduce using rule 1 (prog -> PROGRAM ID ENDINSTRUC vars funcs MAIN body END .)


state 29

    (19) body -> LBRACE list_statements . RBRACE

    RBRACE          shift and go to state 45


state 30

    (25) list_statements -> statement . more_statements
    (27) more_statements -> . list_statements
    (25) list_statements -> . statement more_statements
    (26) list_statements -> . empty
    (20) statement -> . assign
    (21) statement -> . condition
    (22) statement -> . cycle
    (23) statement -> . f_call
    (24) statement -> . print
    (65) empty -> .
    (28) assign -> . ID ASSIGN expresion ENDINSTRUC
    (51) condition -> . IF LPAREN expresion RPAREN body else_block ENDINSTRUC
    (54) cycle -> . DO body WHILE LPAREN expresion RPAREN ENDINSTRUC
    (55) f_call -> . ID LPAREN list_exp RPAREN ENDINSTRUC
    (60) print -> . PRINT LPAREN print_opt RPAREN ENDINSTRUC

    RBRACE          reduce using rule 65 (empty -> .)
    ID              shift and go to state 37
    IF              shift and go to state 38
    DO              shift and go to state 39
    PRINT           shift and go to state 40

    statement                      shift and go to state 30
    more_statements                shift and go to state 46
    list_statements                shift and go to state 47
    empty                          shift and go to state 31
    assign                         shift and go to state 32
    condition                      shift and go to state 33
    cycle                          shift and go to state 34
    f_call                         shift and go to state 35
    print                          shift and go to state 36

state 31

    (26) list_statements -> empty .

    RBRACE          reduce using rule 26 (list_statements -> empty .)


state 32

    (20) statement -> assign .

    ID              reduce using rule 20 (statement -> assign .)
    IF              reduce using rule 20 (statement -> assign .)
    DO              reduce using rule 20 (statement -> assign .)
    PRINT           reduce using rule 20 (statement -> assign .)
    RBRACE          reduce using rule 20 (statement -> assign .)


state 33

    (21) statement -> condition .

    ID              reduce using rule 21 (statement -> condition .)
    IF              reduce using rule 21 (statement -> condition .)
    DO              reduce using rule 21 (statement -> condition .)
    PRINT           reduce using rule 21 (statement -> condition .)
    RBRACE          reduce using rule 21 (statement -> condition .)


state 34

    (22) statement -> cycle .

    ID              reduce using rule 22 (statement -> cycle .)
    IF              reduce using rule 22 (statement -> cycle .)
    DO              reduce using rule 22 (statement -> cycle .)
    PRINT           reduce using rule 22 (statement -> cycle .)
    RBRACE          reduce using rule 22 (statement -> cycle .)


state 35

    (23) statement -> f_call .

    ID              reduce using rule 23 (statement -> f_call .)
    IF              reduce using rule 23 (statement -> f_call .)
    DO              reduce using rule 23 (statement -> f_call .)
    PRINT           reduce using rule 23 (statement -> f_call .)
    RBRACE          reduce using rule 23 (statement -> f_call .)


state 36

    (24) statement -> print .

    ID              reduce using rule 24 (statement -> print .)
    IF              reduce using rule 24 (statement -> print .)
    DO              reduce using rule 24 (statement -> print .)
    PRINT           reduce using rule 24 (statement -> print .)
    RBRACE          reduce using rule 24 (statement -> print .)


state 37

    (28) assign -> ID . ASSIGN expresion ENDINSTRUC
    (55) f_call -> ID . LPAREN list_exp RPAREN ENDINSTRUC

    ASSIGN          shift and go to state 48
    LPAREN          shift and go to state 49


state 38

    (51) condition -> IF . LPAREN expresion RPAREN body else_block ENDINSTRUC

    LPAREN          shift and go to state 50


state 39

    (54) cycle -> DO . body WHILE LPAREN expresion RPAREN ENDINSTRUC
    (19) body -> . LBRACE list_statements RBRACE

    LBRACE          shift and go to state 21

    body                           shift and go to state 51

state 40

    (60) print -> PRINT . LPAREN print_opt RPAREN ENDINSTRUC

    LPAREN          shift and go to state 52


state 41

    (15) list_params -> ID . COLON type mas_params

    COLON           shift and go to state 53


state 42

    (13) funcs -> VOID ID LPAREN list_params . RPAREN LBRACKET vars body RBRACKET ENDINSTRUC

    RPAREN          shift and go to state 54


state 43

    (16) list_params -> empty .

    RPAREN          reduce using rule 16 (list_params -> empty .)


state 44

    (4) variables -> list_ids COLON type ENDINSTRUC . mas_vars
    (8) mas_vars -> . variables
    (9) mas_vars -> . empty
    (4) variables -> . list_ids COLON type ENDINSTRUC mas_vars
    (65) empty -> .
    (5) list_ids -> . ID mas_ids

    VOID            reduce using rule 65 (empty -> .)
    MAIN            reduce using rule 65 (empty -> .)
    LBRACE          reduce using rule 65 (empty -> .)
    ID              shift and go to state 13

    list_ids                       shift and go to state 12
    mas_vars                       shift and go to state 55
    variables                      shift and go to state 56
    empty                          shift and go to state 57

state 45

    (19) body -> LBRACE list_statements RBRACE .

    END             reduce using rule 19 (body -> LBRACE list_statements RBRACE .)
    WHILE           reduce using rule 19 (body -> LBRACE list_statements RBRACE .)
    ELSE            reduce using rule 19 (body -> LBRACE list_statements RBRACE .)
    ENDINSTRUC      reduce using rule 19 (body -> LBRACE list_statements RBRACE .)
    RBRACKET        reduce using rule 19 (body -> LBRACE list_statements RBRACE .)


state 46

    (25) list_statements -> statement more_statements .

    RBRACE          reduce using rule 25 (list_statements -> statement more_statements .)


state 47

    (27) more_statements -> list_statements .

    RBRACE          reduce using rule 27 (more_statements -> list_statements .)


state 48

    (28) assign -> ID ASSIGN . expresion ENDINSTRUC
    (29) expresion -> . exp mas_expresiones
    (34) exp -> . termino mas_exp
    (38) termino -> . factor mas_terminos
    (42) factor -> . LPAREN expresion RPAREN
    (43) factor -> . factor_opt
    (44) factor -> . PLUS factor_opt
    (45) factor -> . MINUS factor_opt
    (46) factor_opt -> . cte
    (47) factor_opt -> . ID
    (48) cte -> . CTEINT
    (49) cte -> . CTEFLOAT
    (50) cte -> . CTEBOOL

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTEBOOL         shift and go to state 70

    expresion                      shift and go to state 59
    exp                            shift and go to state 60
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factor_opt                     shift and go to state 64
    cte                            shift and go to state 67

state 49

    (55) f_call -> ID LPAREN . list_exp RPAREN ENDINSTRUC
    (56) list_exp -> . expresion mas_list_exp
    (57) list_exp -> . empty
    (29) expresion -> . exp mas_expresiones
    (65) empty -> .
    (34) exp -> . termino mas_exp
    (38) termino -> . factor mas_terminos
    (42) factor -> . LPAREN expresion RPAREN
    (43) factor -> . factor_opt
    (44) factor -> . PLUS factor_opt
    (45) factor -> . MINUS factor_opt
    (46) factor_opt -> . cte
    (47) factor_opt -> . ID
    (48) cte -> . CTEINT
    (49) cte -> . CTEFLOAT
    (50) cte -> . CTEBOOL

    RPAREN          reduce using rule 65 (empty -> .)
    LPAREN          shift and go to state 63
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTEBOOL         shift and go to state 70

    list_exp                       shift and go to state 71
    expresion                      shift and go to state 72
    empty                          shift and go to state 73
    exp                            shift and go to state 60
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factor_opt                     shift and go to state 64
    cte                            shift and go to state 67

state 50

    (51) condition -> IF LPAREN . expresion RPAREN body else_block ENDINSTRUC
    (29) expresion -> . exp mas_expresiones
    (34) exp -> . termino mas_exp
    (38) termino -> . factor mas_terminos
    (42) factor -> . LPAREN expresion RPAREN
    (43) factor -> . factor_opt
    (44) factor -> . PLUS factor_opt
    (45) factor -> . MINUS factor_opt
    (46) factor_opt -> . cte
    (47) factor_opt -> . ID
    (48) cte -> . CTEINT
    (49) cte -> . CTEFLOAT
    (50) cte -> . CTEBOOL

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTEBOOL         shift and go to state 70

    expresion                      shift and go to state 74
    exp                            shift and go to state 60
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factor_opt                     shift and go to state 64
    cte                            shift and go to state 67

state 51

    (54) cycle -> DO body . WHILE LPAREN expresion RPAREN ENDINSTRUC

    WHILE           shift and go to state 75


state 52

    (60) print -> PRINT LPAREN . print_opt RPAREN ENDINSTRUC
    (61) print_opt -> . expresion more_opt
    (62) print_opt -> . CTESTRING more_opt
    (29) expresion -> . exp mas_expresiones
    (34) exp -> . termino mas_exp
    (38) termino -> . factor mas_terminos
    (42) factor -> . LPAREN expresion RPAREN
    (43) factor -> . factor_opt
    (44) factor -> . PLUS factor_opt
    (45) factor -> . MINUS factor_opt
    (46) factor_opt -> . cte
    (47) factor_opt -> . ID
    (48) cte -> . CTEINT
    (49) cte -> . CTEFLOAT
    (50) cte -> . CTEBOOL

    CTESTRING       shift and go to state 78
    LPAREN          shift and go to state 63
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTEBOOL         shift and go to state 70

    print_opt                      shift and go to state 76
    expresion                      shift and go to state 77
    exp                            shift and go to state 60
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factor_opt                     shift and go to state 64
    cte                            shift and go to state 67

state 53

    (15) list_params -> ID COLON . type mas_params
    (10) type -> . INT
    (11) type -> . FLOAT
    (12) type -> . BOOL

    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    BOOL            shift and go to state 26

    type                           shift and go to state 79

state 54

    (13) funcs -> VOID ID LPAREN list_params RPAREN . LBRACKET vars body RBRACKET ENDINSTRUC

    LBRACKET        shift and go to state 80


state 55

    (4) variables -> list_ids COLON type ENDINSTRUC mas_vars .

    VOID            reduce using rule 4 (variables -> list_ids COLON type ENDINSTRUC mas_vars .)
    MAIN            reduce using rule 4 (variables -> list_ids COLON type ENDINSTRUC mas_vars .)
    LBRACE          reduce using rule 4 (variables -> list_ids COLON type ENDINSTRUC mas_vars .)


state 56

    (8) mas_vars -> variables .

    VOID            reduce using rule 8 (mas_vars -> variables .)
    MAIN            reduce using rule 8 (mas_vars -> variables .)
    LBRACE          reduce using rule 8 (mas_vars -> variables .)


state 57

    (9) mas_vars -> empty .

    VOID            reduce using rule 9 (mas_vars -> empty .)
    MAIN            reduce using rule 9 (mas_vars -> empty .)
    LBRACE          reduce using rule 9 (mas_vars -> empty .)


state 58

    (47) factor_opt -> ID .

    TIMES           reduce using rule 47 (factor_opt -> ID .)
    DIVIDE          reduce using rule 47 (factor_opt -> ID .)
    PLUS            reduce using rule 47 (factor_opt -> ID .)
    MINUS           reduce using rule 47 (factor_opt -> ID .)
    GREATERTHAN     reduce using rule 47 (factor_opt -> ID .)
    LESSTHAN        reduce using rule 47 (factor_opt -> ID .)
    NOTEQUAL        reduce using rule 47 (factor_opt -> ID .)
    ENDINSTRUC      reduce using rule 47 (factor_opt -> ID .)
    COMMA           reduce using rule 47 (factor_opt -> ID .)
    RPAREN          reduce using rule 47 (factor_opt -> ID .)


state 59

    (28) assign -> ID ASSIGN expresion . ENDINSTRUC

    ENDINSTRUC      shift and go to state 81


state 60

    (29) expresion -> exp . mas_expresiones
    (30) mas_expresiones -> . GREATERTHAN exp
    (31) mas_expresiones -> . LESSTHAN exp
    (32) mas_expresiones -> . NOTEQUAL exp
    (33) mas_expresiones -> . empty
    (65) empty -> .

    GREATERTHAN     shift and go to state 83
    LESSTHAN        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    ENDINSTRUC      reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)

    mas_expresiones                shift and go to state 82
    empty                          shift and go to state 86

state 61

    (34) exp -> termino . mas_exp
    (35) mas_exp -> . PLUS exp
    (36) mas_exp -> . MINUS exp
    (37) mas_exp -> . empty
    (65) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    GREATERTHAN     reduce using rule 65 (empty -> .)
    LESSTHAN        reduce using rule 65 (empty -> .)
    NOTEQUAL        reduce using rule 65 (empty -> .)
    ENDINSTRUC      reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)

    mas_exp                        shift and go to state 87
    empty                          shift and go to state 90

state 62

    (38) termino -> factor . mas_terminos
    (39) mas_terminos -> . TIMES termino
    (40) mas_terminos -> . DIVIDE termino
    (41) mas_terminos -> . empty
    (65) empty -> .

    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    PLUS            reduce using rule 65 (empty -> .)
    MINUS           reduce using rule 65 (empty -> .)
    GREATERTHAN     reduce using rule 65 (empty -> .)
    LESSTHAN        reduce using rule 65 (empty -> .)
    NOTEQUAL        reduce using rule 65 (empty -> .)
    ENDINSTRUC      reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)

    mas_terminos                   shift and go to state 91
    empty                          shift and go to state 94

state 63

    (42) factor -> LPAREN . expresion RPAREN
    (29) expresion -> . exp mas_expresiones
    (34) exp -> . termino mas_exp
    (38) termino -> . factor mas_terminos
    (42) factor -> . LPAREN expresion RPAREN
    (43) factor -> . factor_opt
    (44) factor -> . PLUS factor_opt
    (45) factor -> . MINUS factor_opt
    (46) factor_opt -> . cte
    (47) factor_opt -> . ID
    (48) cte -> . CTEINT
    (49) cte -> . CTEFLOAT
    (50) cte -> . CTEBOOL

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTEBOOL         shift and go to state 70

    expresion                      shift and go to state 95
    exp                            shift and go to state 60
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factor_opt                     shift and go to state 64
    cte                            shift and go to state 67

state 64

    (43) factor -> factor_opt .

    TIMES           reduce using rule 43 (factor -> factor_opt .)
    DIVIDE          reduce using rule 43 (factor -> factor_opt .)
    PLUS            reduce using rule 43 (factor -> factor_opt .)
    MINUS           reduce using rule 43 (factor -> factor_opt .)
    GREATERTHAN     reduce using rule 43 (factor -> factor_opt .)
    LESSTHAN        reduce using rule 43 (factor -> factor_opt .)
    NOTEQUAL        reduce using rule 43 (factor -> factor_opt .)
    ENDINSTRUC      reduce using rule 43 (factor -> factor_opt .)
    COMMA           reduce using rule 43 (factor -> factor_opt .)
    RPAREN          reduce using rule 43 (factor -> factor_opt .)


state 65

    (44) factor -> PLUS . factor_opt
    (46) factor_opt -> . cte
    (47) factor_opt -> . ID
    (48) cte -> . CTEINT
    (49) cte -> . CTEFLOAT
    (50) cte -> . CTEBOOL

    ID              shift and go to state 58
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTEBOOL         shift and go to state 70

    factor_opt                     shift and go to state 96
    cte                            shift and go to state 67

state 66

    (45) factor -> MINUS . factor_opt
    (46) factor_opt -> . cte
    (47) factor_opt -> . ID
    (48) cte -> . CTEINT
    (49) cte -> . CTEFLOAT
    (50) cte -> . CTEBOOL

    ID              shift and go to state 58
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTEBOOL         shift and go to state 70

    factor_opt                     shift and go to state 97
    cte                            shift and go to state 67

state 67

    (46) factor_opt -> cte .

    TIMES           reduce using rule 46 (factor_opt -> cte .)
    DIVIDE          reduce using rule 46 (factor_opt -> cte .)
    PLUS            reduce using rule 46 (factor_opt -> cte .)
    MINUS           reduce using rule 46 (factor_opt -> cte .)
    GREATERTHAN     reduce using rule 46 (factor_opt -> cte .)
    LESSTHAN        reduce using rule 46 (factor_opt -> cte .)
    NOTEQUAL        reduce using rule 46 (factor_opt -> cte .)
    ENDINSTRUC      reduce using rule 46 (factor_opt -> cte .)
    COMMA           reduce using rule 46 (factor_opt -> cte .)
    RPAREN          reduce using rule 46 (factor_opt -> cte .)


state 68

    (48) cte -> CTEINT .

    TIMES           reduce using rule 48 (cte -> CTEINT .)
    DIVIDE          reduce using rule 48 (cte -> CTEINT .)
    PLUS            reduce using rule 48 (cte -> CTEINT .)
    MINUS           reduce using rule 48 (cte -> CTEINT .)
    GREATERTHAN     reduce using rule 48 (cte -> CTEINT .)
    LESSTHAN        reduce using rule 48 (cte -> CTEINT .)
    NOTEQUAL        reduce using rule 48 (cte -> CTEINT .)
    ENDINSTRUC      reduce using rule 48 (cte -> CTEINT .)
    COMMA           reduce using rule 48 (cte -> CTEINT .)
    RPAREN          reduce using rule 48 (cte -> CTEINT .)


state 69

    (49) cte -> CTEFLOAT .

    TIMES           reduce using rule 49 (cte -> CTEFLOAT .)
    DIVIDE          reduce using rule 49 (cte -> CTEFLOAT .)
    PLUS            reduce using rule 49 (cte -> CTEFLOAT .)
    MINUS           reduce using rule 49 (cte -> CTEFLOAT .)
    GREATERTHAN     reduce using rule 49 (cte -> CTEFLOAT .)
    LESSTHAN        reduce using rule 49 (cte -> CTEFLOAT .)
    NOTEQUAL        reduce using rule 49 (cte -> CTEFLOAT .)
    ENDINSTRUC      reduce using rule 49 (cte -> CTEFLOAT .)
    COMMA           reduce using rule 49 (cte -> CTEFLOAT .)
    RPAREN          reduce using rule 49 (cte -> CTEFLOAT .)


state 70

    (50) cte -> CTEBOOL .

    TIMES           reduce using rule 50 (cte -> CTEBOOL .)
    DIVIDE          reduce using rule 50 (cte -> CTEBOOL .)
    PLUS            reduce using rule 50 (cte -> CTEBOOL .)
    MINUS           reduce using rule 50 (cte -> CTEBOOL .)
    GREATERTHAN     reduce using rule 50 (cte -> CTEBOOL .)
    LESSTHAN        reduce using rule 50 (cte -> CTEBOOL .)
    NOTEQUAL        reduce using rule 50 (cte -> CTEBOOL .)
    ENDINSTRUC      reduce using rule 50 (cte -> CTEBOOL .)
    COMMA           reduce using rule 50 (cte -> CTEBOOL .)
    RPAREN          reduce using rule 50 (cte -> CTEBOOL .)


state 71

    (55) f_call -> ID LPAREN list_exp . RPAREN ENDINSTRUC

    RPAREN          shift and go to state 98


state 72

    (56) list_exp -> expresion . mas_list_exp
    (58) mas_list_exp -> . COMMA list_exp
    (59) mas_list_exp -> . empty
    (65) empty -> .

    COMMA           shift and go to state 100
    RPAREN          reduce using rule 65 (empty -> .)

    mas_list_exp                   shift and go to state 99
    empty                          shift and go to state 101

state 73

    (57) list_exp -> empty .

    RPAREN          reduce using rule 57 (list_exp -> empty .)


state 74

    (51) condition -> IF LPAREN expresion . RPAREN body else_block ENDINSTRUC

    RPAREN          shift and go to state 102


state 75

    (54) cycle -> DO body WHILE . LPAREN expresion RPAREN ENDINSTRUC

    LPAREN          shift and go to state 103


state 76

    (60) print -> PRINT LPAREN print_opt . RPAREN ENDINSTRUC

    RPAREN          shift and go to state 104


state 77

    (61) print_opt -> expresion . more_opt
    (63) more_opt -> . COMMA print_opt
    (64) more_opt -> . empty
    (65) empty -> .

    COMMA           shift and go to state 106
    RPAREN          reduce using rule 65 (empty -> .)

    more_opt                       shift and go to state 105
    empty                          shift and go to state 107

state 78

    (62) print_opt -> CTESTRING . more_opt
    (63) more_opt -> . COMMA print_opt
    (64) more_opt -> . empty
    (65) empty -> .

    COMMA           shift and go to state 106
    RPAREN          reduce using rule 65 (empty -> .)

    more_opt                       shift and go to state 108
    empty                          shift and go to state 107

state 79

    (15) list_params -> ID COLON type . mas_params
    (17) mas_params -> . COMMA list_params
    (18) mas_params -> . empty
    (65) empty -> .

    COMMA           shift and go to state 110
    RPAREN          reduce using rule 65 (empty -> .)

    mas_params                     shift and go to state 109
    empty                          shift and go to state 111

state 80

    (13) funcs -> VOID ID LPAREN list_params RPAREN LBRACKET . vars body RBRACKET ENDINSTRUC
    (2) vars -> . VAR variables
    (3) vars -> . empty
    (65) empty -> .

    VAR             shift and go to state 6
    LBRACE          reduce using rule 65 (empty -> .)

    vars                           shift and go to state 112
    empty                          shift and go to state 7

state 81

    (28) assign -> ID ASSIGN expresion ENDINSTRUC .

    ID              reduce using rule 28 (assign -> ID ASSIGN expresion ENDINSTRUC .)
    IF              reduce using rule 28 (assign -> ID ASSIGN expresion ENDINSTRUC .)
    DO              reduce using rule 28 (assign -> ID ASSIGN expresion ENDINSTRUC .)
    PRINT           reduce using rule 28 (assign -> ID ASSIGN expresion ENDINSTRUC .)
    RBRACE          reduce using rule 28 (assign -> ID ASSIGN expresion ENDINSTRUC .)


state 82

    (29) expresion -> exp mas_expresiones .

    ENDINSTRUC      reduce using rule 29 (expresion -> exp mas_expresiones .)
    COMMA           reduce using rule 29 (expresion -> exp mas_expresiones .)
    RPAREN          reduce using rule 29 (expresion -> exp mas_expresiones .)


state 83

    (30) mas_expresiones -> GREATERTHAN . exp
    (34) exp -> . termino mas_exp
    (38) termino -> . factor mas_terminos
    (42) factor -> . LPAREN expresion RPAREN
    (43) factor -> . factor_opt
    (44) factor -> . PLUS factor_opt
    (45) factor -> . MINUS factor_opt
    (46) factor_opt -> . cte
    (47) factor_opt -> . ID
    (48) cte -> . CTEINT
    (49) cte -> . CTEFLOAT
    (50) cte -> . CTEBOOL

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTEBOOL         shift and go to state 70

    exp                            shift and go to state 113
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factor_opt                     shift and go to state 64
    cte                            shift and go to state 67

state 84

    (31) mas_expresiones -> LESSTHAN . exp
    (34) exp -> . termino mas_exp
    (38) termino -> . factor mas_terminos
    (42) factor -> . LPAREN expresion RPAREN
    (43) factor -> . factor_opt
    (44) factor -> . PLUS factor_opt
    (45) factor -> . MINUS factor_opt
    (46) factor_opt -> . cte
    (47) factor_opt -> . ID
    (48) cte -> . CTEINT
    (49) cte -> . CTEFLOAT
    (50) cte -> . CTEBOOL

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTEBOOL         shift and go to state 70

    exp                            shift and go to state 114
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factor_opt                     shift and go to state 64
    cte                            shift and go to state 67

state 85

    (32) mas_expresiones -> NOTEQUAL . exp
    (34) exp -> . termino mas_exp
    (38) termino -> . factor mas_terminos
    (42) factor -> . LPAREN expresion RPAREN
    (43) factor -> . factor_opt
    (44) factor -> . PLUS factor_opt
    (45) factor -> . MINUS factor_opt
    (46) factor_opt -> . cte
    (47) factor_opt -> . ID
    (48) cte -> . CTEINT
    (49) cte -> . CTEFLOAT
    (50) cte -> . CTEBOOL

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTEBOOL         shift and go to state 70

    exp                            shift and go to state 115
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factor_opt                     shift and go to state 64
    cte                            shift and go to state 67

state 86

    (33) mas_expresiones -> empty .

    ENDINSTRUC      reduce using rule 33 (mas_expresiones -> empty .)
    COMMA           reduce using rule 33 (mas_expresiones -> empty .)
    RPAREN          reduce using rule 33 (mas_expresiones -> empty .)


state 87

    (34) exp -> termino mas_exp .

    GREATERTHAN     reduce using rule 34 (exp -> termino mas_exp .)
    LESSTHAN        reduce using rule 34 (exp -> termino mas_exp .)
    NOTEQUAL        reduce using rule 34 (exp -> termino mas_exp .)
    ENDINSTRUC      reduce using rule 34 (exp -> termino mas_exp .)
    COMMA           reduce using rule 34 (exp -> termino mas_exp .)
    RPAREN          reduce using rule 34 (exp -> termino mas_exp .)


state 88

    (35) mas_exp -> PLUS . exp
    (34) exp -> . termino mas_exp
    (38) termino -> . factor mas_terminos
    (42) factor -> . LPAREN expresion RPAREN
    (43) factor -> . factor_opt
    (44) factor -> . PLUS factor_opt
    (45) factor -> . MINUS factor_opt
    (46) factor_opt -> . cte
    (47) factor_opt -> . ID
    (48) cte -> . CTEINT
    (49) cte -> . CTEFLOAT
    (50) cte -> . CTEBOOL

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTEBOOL         shift and go to state 70

    exp                            shift and go to state 116
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factor_opt                     shift and go to state 64
    cte                            shift and go to state 67

state 89

    (36) mas_exp -> MINUS . exp
    (34) exp -> . termino mas_exp
    (38) termino -> . factor mas_terminos
    (42) factor -> . LPAREN expresion RPAREN
    (43) factor -> . factor_opt
    (44) factor -> . PLUS factor_opt
    (45) factor -> . MINUS factor_opt
    (46) factor_opt -> . cte
    (47) factor_opt -> . ID
    (48) cte -> . CTEINT
    (49) cte -> . CTEFLOAT
    (50) cte -> . CTEBOOL

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTEBOOL         shift and go to state 70

    exp                            shift and go to state 117
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factor_opt                     shift and go to state 64
    cte                            shift and go to state 67

state 90

    (37) mas_exp -> empty .

    GREATERTHAN     reduce using rule 37 (mas_exp -> empty .)
    LESSTHAN        reduce using rule 37 (mas_exp -> empty .)
    NOTEQUAL        reduce using rule 37 (mas_exp -> empty .)
    ENDINSTRUC      reduce using rule 37 (mas_exp -> empty .)
    COMMA           reduce using rule 37 (mas_exp -> empty .)
    RPAREN          reduce using rule 37 (mas_exp -> empty .)


state 91

    (38) termino -> factor mas_terminos .

    PLUS            reduce using rule 38 (termino -> factor mas_terminos .)
    MINUS           reduce using rule 38 (termino -> factor mas_terminos .)
    GREATERTHAN     reduce using rule 38 (termino -> factor mas_terminos .)
    LESSTHAN        reduce using rule 38 (termino -> factor mas_terminos .)
    NOTEQUAL        reduce using rule 38 (termino -> factor mas_terminos .)
    ENDINSTRUC      reduce using rule 38 (termino -> factor mas_terminos .)
    COMMA           reduce using rule 38 (termino -> factor mas_terminos .)
    RPAREN          reduce using rule 38 (termino -> factor mas_terminos .)


state 92

    (39) mas_terminos -> TIMES . termino
    (38) termino -> . factor mas_terminos
    (42) factor -> . LPAREN expresion RPAREN
    (43) factor -> . factor_opt
    (44) factor -> . PLUS factor_opt
    (45) factor -> . MINUS factor_opt
    (46) factor_opt -> . cte
    (47) factor_opt -> . ID
    (48) cte -> . CTEINT
    (49) cte -> . CTEFLOAT
    (50) cte -> . CTEBOOL

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTEBOOL         shift and go to state 70

    termino                        shift and go to state 118
    factor                         shift and go to state 62
    factor_opt                     shift and go to state 64
    cte                            shift and go to state 67

state 93

    (40) mas_terminos -> DIVIDE . termino
    (38) termino -> . factor mas_terminos
    (42) factor -> . LPAREN expresion RPAREN
    (43) factor -> . factor_opt
    (44) factor -> . PLUS factor_opt
    (45) factor -> . MINUS factor_opt
    (46) factor_opt -> . cte
    (47) factor_opt -> . ID
    (48) cte -> . CTEINT
    (49) cte -> . CTEFLOAT
    (50) cte -> . CTEBOOL

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTEBOOL         shift and go to state 70

    termino                        shift and go to state 119
    factor                         shift and go to state 62
    factor_opt                     shift and go to state 64
    cte                            shift and go to state 67

state 94

    (41) mas_terminos -> empty .

    PLUS            reduce using rule 41 (mas_terminos -> empty .)
    MINUS           reduce using rule 41 (mas_terminos -> empty .)
    GREATERTHAN     reduce using rule 41 (mas_terminos -> empty .)
    LESSTHAN        reduce using rule 41 (mas_terminos -> empty .)
    NOTEQUAL        reduce using rule 41 (mas_terminos -> empty .)
    ENDINSTRUC      reduce using rule 41 (mas_terminos -> empty .)
    COMMA           reduce using rule 41 (mas_terminos -> empty .)
    RPAREN          reduce using rule 41 (mas_terminos -> empty .)


state 95

    (42) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 120


state 96

    (44) factor -> PLUS factor_opt .

    TIMES           reduce using rule 44 (factor -> PLUS factor_opt .)
    DIVIDE          reduce using rule 44 (factor -> PLUS factor_opt .)
    PLUS            reduce using rule 44 (factor -> PLUS factor_opt .)
    MINUS           reduce using rule 44 (factor -> PLUS factor_opt .)
    GREATERTHAN     reduce using rule 44 (factor -> PLUS factor_opt .)
    LESSTHAN        reduce using rule 44 (factor -> PLUS factor_opt .)
    NOTEQUAL        reduce using rule 44 (factor -> PLUS factor_opt .)
    ENDINSTRUC      reduce using rule 44 (factor -> PLUS factor_opt .)
    COMMA           reduce using rule 44 (factor -> PLUS factor_opt .)
    RPAREN          reduce using rule 44 (factor -> PLUS factor_opt .)


state 97

    (45) factor -> MINUS factor_opt .

    TIMES           reduce using rule 45 (factor -> MINUS factor_opt .)
    DIVIDE          reduce using rule 45 (factor -> MINUS factor_opt .)
    PLUS            reduce using rule 45 (factor -> MINUS factor_opt .)
    MINUS           reduce using rule 45 (factor -> MINUS factor_opt .)
    GREATERTHAN     reduce using rule 45 (factor -> MINUS factor_opt .)
    LESSTHAN        reduce using rule 45 (factor -> MINUS factor_opt .)
    NOTEQUAL        reduce using rule 45 (factor -> MINUS factor_opt .)
    ENDINSTRUC      reduce using rule 45 (factor -> MINUS factor_opt .)
    COMMA           reduce using rule 45 (factor -> MINUS factor_opt .)
    RPAREN          reduce using rule 45 (factor -> MINUS factor_opt .)


state 98

    (55) f_call -> ID LPAREN list_exp RPAREN . ENDINSTRUC

    ENDINSTRUC      shift and go to state 121


state 99

    (56) list_exp -> expresion mas_list_exp .

    RPAREN          reduce using rule 56 (list_exp -> expresion mas_list_exp .)


state 100

    (58) mas_list_exp -> COMMA . list_exp
    (56) list_exp -> . expresion mas_list_exp
    (57) list_exp -> . empty
    (29) expresion -> . exp mas_expresiones
    (65) empty -> .
    (34) exp -> . termino mas_exp
    (38) termino -> . factor mas_terminos
    (42) factor -> . LPAREN expresion RPAREN
    (43) factor -> . factor_opt
    (44) factor -> . PLUS factor_opt
    (45) factor -> . MINUS factor_opt
    (46) factor_opt -> . cte
    (47) factor_opt -> . ID
    (48) cte -> . CTEINT
    (49) cte -> . CTEFLOAT
    (50) cte -> . CTEBOOL

    RPAREN          reduce using rule 65 (empty -> .)
    LPAREN          shift and go to state 63
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTEBOOL         shift and go to state 70

    list_exp                       shift and go to state 122
    expresion                      shift and go to state 72
    empty                          shift and go to state 73
    exp                            shift and go to state 60
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factor_opt                     shift and go to state 64
    cte                            shift and go to state 67

state 101

    (59) mas_list_exp -> empty .

    RPAREN          reduce using rule 59 (mas_list_exp -> empty .)


state 102

    (51) condition -> IF LPAREN expresion RPAREN . body else_block ENDINSTRUC
    (19) body -> . LBRACE list_statements RBRACE

    LBRACE          shift and go to state 21

    body                           shift and go to state 123

state 103

    (54) cycle -> DO body WHILE LPAREN . expresion RPAREN ENDINSTRUC
    (29) expresion -> . exp mas_expresiones
    (34) exp -> . termino mas_exp
    (38) termino -> . factor mas_terminos
    (42) factor -> . LPAREN expresion RPAREN
    (43) factor -> . factor_opt
    (44) factor -> . PLUS factor_opt
    (45) factor -> . MINUS factor_opt
    (46) factor_opt -> . cte
    (47) factor_opt -> . ID
    (48) cte -> . CTEINT
    (49) cte -> . CTEFLOAT
    (50) cte -> . CTEBOOL

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTEBOOL         shift and go to state 70

    expresion                      shift and go to state 124
    exp                            shift and go to state 60
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factor_opt                     shift and go to state 64
    cte                            shift and go to state 67

state 104

    (60) print -> PRINT LPAREN print_opt RPAREN . ENDINSTRUC

    ENDINSTRUC      shift and go to state 125


state 105

    (61) print_opt -> expresion more_opt .

    RPAREN          reduce using rule 61 (print_opt -> expresion more_opt .)


state 106

    (63) more_opt -> COMMA . print_opt
    (61) print_opt -> . expresion more_opt
    (62) print_opt -> . CTESTRING more_opt
    (29) expresion -> . exp mas_expresiones
    (34) exp -> . termino mas_exp
    (38) termino -> . factor mas_terminos
    (42) factor -> . LPAREN expresion RPAREN
    (43) factor -> . factor_opt
    (44) factor -> . PLUS factor_opt
    (45) factor -> . MINUS factor_opt
    (46) factor_opt -> . cte
    (47) factor_opt -> . ID
    (48) cte -> . CTEINT
    (49) cte -> . CTEFLOAT
    (50) cte -> . CTEBOOL

    CTESTRING       shift and go to state 78
    LPAREN          shift and go to state 63
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTEBOOL         shift and go to state 70

    print_opt                      shift and go to state 126
    expresion                      shift and go to state 77
    exp                            shift and go to state 60
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factor_opt                     shift and go to state 64
    cte                            shift and go to state 67

state 107

    (64) more_opt -> empty .

    RPAREN          reduce using rule 64 (more_opt -> empty .)


state 108

    (62) print_opt -> CTESTRING more_opt .

    RPAREN          reduce using rule 62 (print_opt -> CTESTRING more_opt .)


state 109

    (15) list_params -> ID COLON type mas_params .

    RPAREN          reduce using rule 15 (list_params -> ID COLON type mas_params .)


state 110

    (17) mas_params -> COMMA . list_params
    (15) list_params -> . ID COLON type mas_params
    (16) list_params -> . empty
    (65) empty -> .

    ID              shift and go to state 41
    RPAREN          reduce using rule 65 (empty -> .)

    list_params                    shift and go to state 127
    empty                          shift and go to state 43

state 111

    (18) mas_params -> empty .

    RPAREN          reduce using rule 18 (mas_params -> empty .)


state 112

    (13) funcs -> VOID ID LPAREN list_params RPAREN LBRACKET vars . body RBRACKET ENDINSTRUC
    (19) body -> . LBRACE list_statements RBRACE

    LBRACE          shift and go to state 21

    body                           shift and go to state 128

state 113

    (30) mas_expresiones -> GREATERTHAN exp .

    ENDINSTRUC      reduce using rule 30 (mas_expresiones -> GREATERTHAN exp .)
    COMMA           reduce using rule 30 (mas_expresiones -> GREATERTHAN exp .)
    RPAREN          reduce using rule 30 (mas_expresiones -> GREATERTHAN exp .)


state 114

    (31) mas_expresiones -> LESSTHAN exp .

    ENDINSTRUC      reduce using rule 31 (mas_expresiones -> LESSTHAN exp .)
    COMMA           reduce using rule 31 (mas_expresiones -> LESSTHAN exp .)
    RPAREN          reduce using rule 31 (mas_expresiones -> LESSTHAN exp .)


state 115

    (32) mas_expresiones -> NOTEQUAL exp .

    ENDINSTRUC      reduce using rule 32 (mas_expresiones -> NOTEQUAL exp .)
    COMMA           reduce using rule 32 (mas_expresiones -> NOTEQUAL exp .)
    RPAREN          reduce using rule 32 (mas_expresiones -> NOTEQUAL exp .)


state 116

    (35) mas_exp -> PLUS exp .

    GREATERTHAN     reduce using rule 35 (mas_exp -> PLUS exp .)
    LESSTHAN        reduce using rule 35 (mas_exp -> PLUS exp .)
    NOTEQUAL        reduce using rule 35 (mas_exp -> PLUS exp .)
    ENDINSTRUC      reduce using rule 35 (mas_exp -> PLUS exp .)
    COMMA           reduce using rule 35 (mas_exp -> PLUS exp .)
    RPAREN          reduce using rule 35 (mas_exp -> PLUS exp .)


state 117

    (36) mas_exp -> MINUS exp .

    GREATERTHAN     reduce using rule 36 (mas_exp -> MINUS exp .)
    LESSTHAN        reduce using rule 36 (mas_exp -> MINUS exp .)
    NOTEQUAL        reduce using rule 36 (mas_exp -> MINUS exp .)
    ENDINSTRUC      reduce using rule 36 (mas_exp -> MINUS exp .)
    COMMA           reduce using rule 36 (mas_exp -> MINUS exp .)
    RPAREN          reduce using rule 36 (mas_exp -> MINUS exp .)


state 118

    (39) mas_terminos -> TIMES termino .

    PLUS            reduce using rule 39 (mas_terminos -> TIMES termino .)
    MINUS           reduce using rule 39 (mas_terminos -> TIMES termino .)
    GREATERTHAN     reduce using rule 39 (mas_terminos -> TIMES termino .)
    LESSTHAN        reduce using rule 39 (mas_terminos -> TIMES termino .)
    NOTEQUAL        reduce using rule 39 (mas_terminos -> TIMES termino .)
    ENDINSTRUC      reduce using rule 39 (mas_terminos -> TIMES termino .)
    COMMA           reduce using rule 39 (mas_terminos -> TIMES termino .)
    RPAREN          reduce using rule 39 (mas_terminos -> TIMES termino .)


state 119

    (40) mas_terminos -> DIVIDE termino .

    PLUS            reduce using rule 40 (mas_terminos -> DIVIDE termino .)
    MINUS           reduce using rule 40 (mas_terminos -> DIVIDE termino .)
    GREATERTHAN     reduce using rule 40 (mas_terminos -> DIVIDE termino .)
    LESSTHAN        reduce using rule 40 (mas_terminos -> DIVIDE termino .)
    NOTEQUAL        reduce using rule 40 (mas_terminos -> DIVIDE termino .)
    ENDINSTRUC      reduce using rule 40 (mas_terminos -> DIVIDE termino .)
    COMMA           reduce using rule 40 (mas_terminos -> DIVIDE termino .)
    RPAREN          reduce using rule 40 (mas_terminos -> DIVIDE termino .)


state 120

    (42) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 42 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 42 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 42 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 42 (factor -> LPAREN expresion RPAREN .)
    GREATERTHAN     reduce using rule 42 (factor -> LPAREN expresion RPAREN .)
    LESSTHAN        reduce using rule 42 (factor -> LPAREN expresion RPAREN .)
    NOTEQUAL        reduce using rule 42 (factor -> LPAREN expresion RPAREN .)
    ENDINSTRUC      reduce using rule 42 (factor -> LPAREN expresion RPAREN .)
    COMMA           reduce using rule 42 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 42 (factor -> LPAREN expresion RPAREN .)


state 121

    (55) f_call -> ID LPAREN list_exp RPAREN ENDINSTRUC .

    ID              reduce using rule 55 (f_call -> ID LPAREN list_exp RPAREN ENDINSTRUC .)
    IF              reduce using rule 55 (f_call -> ID LPAREN list_exp RPAREN ENDINSTRUC .)
    DO              reduce using rule 55 (f_call -> ID LPAREN list_exp RPAREN ENDINSTRUC .)
    PRINT           reduce using rule 55 (f_call -> ID LPAREN list_exp RPAREN ENDINSTRUC .)
    RBRACE          reduce using rule 55 (f_call -> ID LPAREN list_exp RPAREN ENDINSTRUC .)


state 122

    (58) mas_list_exp -> COMMA list_exp .

    RPAREN          reduce using rule 58 (mas_list_exp -> COMMA list_exp .)


state 123

    (51) condition -> IF LPAREN expresion RPAREN body . else_block ENDINSTRUC
    (52) else_block -> . ELSE body
    (53) else_block -> . empty
    (65) empty -> .

    ELSE            shift and go to state 130
    ENDINSTRUC      reduce using rule 65 (empty -> .)

    else_block                     shift and go to state 129
    empty                          shift and go to state 131

state 124

    (54) cycle -> DO body WHILE LPAREN expresion . RPAREN ENDINSTRUC

    RPAREN          shift and go to state 132


state 125

    (60) print -> PRINT LPAREN print_opt RPAREN ENDINSTRUC .

    ID              reduce using rule 60 (print -> PRINT LPAREN print_opt RPAREN ENDINSTRUC .)
    IF              reduce using rule 60 (print -> PRINT LPAREN print_opt RPAREN ENDINSTRUC .)
    DO              reduce using rule 60 (print -> PRINT LPAREN print_opt RPAREN ENDINSTRUC .)
    PRINT           reduce using rule 60 (print -> PRINT LPAREN print_opt RPAREN ENDINSTRUC .)
    RBRACE          reduce using rule 60 (print -> PRINT LPAREN print_opt RPAREN ENDINSTRUC .)


state 126

    (63) more_opt -> COMMA print_opt .

    RPAREN          reduce using rule 63 (more_opt -> COMMA print_opt .)


state 127

    (17) mas_params -> COMMA list_params .

    RPAREN          reduce using rule 17 (mas_params -> COMMA list_params .)


state 128

    (13) funcs -> VOID ID LPAREN list_params RPAREN LBRACKET vars body . RBRACKET ENDINSTRUC

    RBRACKET        shift and go to state 133


state 129

    (51) condition -> IF LPAREN expresion RPAREN body else_block . ENDINSTRUC

    ENDINSTRUC      shift and go to state 134


state 130

    (52) else_block -> ELSE . body
    (19) body -> . LBRACE list_statements RBRACE

    LBRACE          shift and go to state 21

    body                           shift and go to state 135

state 131

    (53) else_block -> empty .

    ENDINSTRUC      reduce using rule 53 (else_block -> empty .)


state 132

    (54) cycle -> DO body WHILE LPAREN expresion RPAREN . ENDINSTRUC

    ENDINSTRUC      shift and go to state 136


state 133

    (13) funcs -> VOID ID LPAREN list_params RPAREN LBRACKET vars body RBRACKET . ENDINSTRUC

    ENDINSTRUC      shift and go to state 137


state 134

    (51) condition -> IF LPAREN expresion RPAREN body else_block ENDINSTRUC .

    ID              reduce using rule 51 (condition -> IF LPAREN expresion RPAREN body else_block ENDINSTRUC .)
    IF              reduce using rule 51 (condition -> IF LPAREN expresion RPAREN body else_block ENDINSTRUC .)
    DO              reduce using rule 51 (condition -> IF LPAREN expresion RPAREN body else_block ENDINSTRUC .)
    PRINT           reduce using rule 51 (condition -> IF LPAREN expresion RPAREN body else_block ENDINSTRUC .)
    RBRACE          reduce using rule 51 (condition -> IF LPAREN expresion RPAREN body else_block ENDINSTRUC .)


state 135

    (52) else_block -> ELSE body .

    ENDINSTRUC      reduce using rule 52 (else_block -> ELSE body .)


state 136

    (54) cycle -> DO body WHILE LPAREN expresion RPAREN ENDINSTRUC .

    ID              reduce using rule 54 (cycle -> DO body WHILE LPAREN expresion RPAREN ENDINSTRUC .)
    IF              reduce using rule 54 (cycle -> DO body WHILE LPAREN expresion RPAREN ENDINSTRUC .)
    DO              reduce using rule 54 (cycle -> DO body WHILE LPAREN expresion RPAREN ENDINSTRUC .)
    PRINT           reduce using rule 54 (cycle -> DO body WHILE LPAREN expresion RPAREN ENDINSTRUC .)
    RBRACE          reduce using rule 54 (cycle -> DO body WHILE LPAREN expresion RPAREN ENDINSTRUC .)


state 137

    (13) funcs -> VOID ID LPAREN list_params RPAREN LBRACKET vars body RBRACKET ENDINSTRUC .

    MAIN            reduce using rule 13 (funcs -> VOID ID LPAREN list_params RPAREN LBRACKET vars body RBRACKET ENDINSTRUC .)

